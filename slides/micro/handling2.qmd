---
subtitle: "第10回 データ・ハンドリング（2）"
date: "2024/6/13"
format: revealjs
metadata-files: 
  - _slide.yml
---

## 授業開始前に

```{r}
#| include: false
pacman::p_load(tidyverse)
```

すぐに実習できるように準備しておきましょう。

1. JDCat分析ツールを起動しておいてください。
2. 本日授業用のプロジェクトを作成してください。
3. LMSから実習用データをダウンロードしておいてください。
   * 先週と同じデータです。
4. ダウンロードしてデータをプロジェクト・フォルダーにアップロードしてください。
   * プロジェクト・フォルダー内に`Data`フォルダーを作成し、そこにアップロードしましょう。
5. 実習用コードを入力するスクリプトファイル、またはQuartoファイルを開き、以下のコードを入力&実行してください。

```{r}
#| eval: false
library(tidyverse)

# countries.csvのアップロード先に応じて、パスを適宜修正すること
df <- read_csv("Data/countries.csv")
```

* トラブルが生じた場合、速やかにTAを呼んでください。
* 時間に余裕があれば、スライド内のコードも書いておきましょう。

# データのグルーピングと要約

## 目標

```{r}
#| include: false
pacman::p_load(naniar)
```

* 変数の記述統計量を計算する
   * 記述統計量: 平均値、中央値、標準偏差、分散、ケース数など
* グループごとに記述統計量を計算する

**例)** 大陸ごとに政治的権利（`FH_PR`）と市民的自由（`FH_CL`）の平均値を計算する

```{r}
#| message: false
#| echo: false
library(tidyverse)
df <- read_csv("Data/countries.csv")
df |> 
  group_by(Continent) |>
  summarise(PR = mean(FH_PR, na.rm = TRUE),
            CL = mean(FH_CL, na.rm = TRUE))
```

## 記述統計量

変数が持つ情報を要約した数値

* 詳細は後期の「マクロ政治データ分析実習」で

元の情報：

```{r}
MathScore <- c(82, 45, 69, 94, 88, 73, NA, 51, 90, 63)
```

:::: {.columns}

::: {.column width="45%"}
`MathScore`を代表する値

```{r}
# 平均値
mean(MathScore, na.rm = TRUE) 
# 中央値
median(MathScore, na.rm = TRUE)
```
:::

::: {.column width="10%"}
:::

::: {.column width="45%"}
`MathScore`のばらつきの具合

```{r}
# 不偏分散
var(MathScore, na.rm = TRUE)
# 不偏分散の平方根
sd(MathScore, na.rm = TRUE)
# 四分位範囲
IQR(MathScore, na.rm = TRUE)
```
:::

::::

## `summarise()`の使い方

`summarise()`: 記述統計量を計算する{dplyr}の関数

```r
データフレーム |>
  summarise(記述統計の関数(変数名, ...))
```

記述統計の関数の例

* `mean()`：平均値
* `median()`：中央値
* `sd()`：不偏分散の平方根（一般的に「標準偏差」と呼ばれるもの）
* `var()`：不偏分散
* `IQR()`：四分位範囲
* `min()`、`max()`：最小値と最大値
* `n()`：ケース数（引数不要）
* その他（教科書[第14.1.2章](https://www.jaysong.net/RBook/datahandling2.html#summarise%E3%81%AB%E4%BD%BF%E3%81%88%E3%82%8B%E4%BE%BF%E5%88%A9%E3%81%AA%E9%96%A2%E6%95%B0)）

## 記述統計量の計算（1）

```{r}
#| eval: false
library(tidyverse)
df <- read_csv("Data/countries.csv") # 第9回の実習用データ
```

**例)** `df`の`Population`と`Area`の平均値（`mean()`）を計算

```{r}
df |>
  summarise(mean(Population),
            mean(Area))
```

## 記述統計量の計算（2）

`summarise()`内に異なる関数を使うことも可能

**例)** `df`の`Population`と`Area`の平均値（`mean()`）と標準偏差（`sd()`）を計算

```{r}
df |>
  summarise(mean(Population),
            sd(Population),
            mean(Area),
            sd(Area))
```

## 出力された結果をより見やすく

`summarise()`内に`出力される結果の列名 = 関数()`を指定

**例)** `df`の`Population`と`Area`の平均値（`mean()`）と標準偏差（`sd()`）を計算し、結果の列名を`Mean_Pop`、`SD_Pop`などとする

```{r}
Pop_Area_df <- df |>
  summarise(Mean_Pop  = mean(Population),
            SD_Pop    = sd(Population),
            Mean_Area = mean(Area),
            SD_Area   = sd(Area))
Pop_Area_df
```

## グループごとの記述統計量

{dplyr}の`group_by()`を使用

```{r}
#| eval: false
#| code-line-numbers: "2"
データフレーム名 |>
  group_by(グループ化する変数名) |>
  summarise(...)
```

**例)** `df`の`Continent`でデータをグループ化し、`PPP_per_capita`の平均値を計算

```{r}
# PPP_per_capitaが欠損している国もあるので、na.rm = TRUEを追加
df |>
  group_by(Continent) |>
  summarise(Mean_PPP = mean(PPP_per_capita, na.rm = TRUE))
```

::: aside
`group_by()`を使わず、`summarise()`の内部に`.by = グルーピングする変数名`のような書き方でも良い（{dplyr} 1.1.0から）
:::

## 複数の変数でグルーピング

**例)** `df`の`Continent`と`G20`でデータをグループ化し、`HDI_2018`の平均値を計算

```{r}
#| message: true
df |>
  group_by(Continent, G20) |>
  summarise(Mean_HDI = mean(HDI_2018, na.rm = TRUE))
```

## グルービング後の`summarise()`

謎のメッセージが出力される

```
## `summarise()` has grouped output by 'Continent'. You can override using 
the `.groups` argument.
```

とりあえず、`group_by()`の後に`summarise()`を使う場合、`summarise()`の最後に`.groups = "drop"`を追加する。

* 理由は割愛するが、詳細は教科書[第14.2章](https://www.jaysong.net/RBook/datahandling2.html#sec-handling2-group)を参照
* 多くの場合、メッセージが出力されるだけで、問題が生じることはあまりない。
* しかし、複数の変数でグルーピングしたり、記述統計量が複数計算される関数（`quantile()`など）を使う場合、問題が生じる可能性あり
  * 特に`summarise()`の後に更にパイプ（`|>`）を使って計算を続ける場合
* とりあえず、`.groups = "drop"`をしておけば安全
* `summarise()`の代わりに`reframe()`を使えば`.groups = "drop"`は不要（{dplyr} 1.1.0から）

## `.groups = "drop"`を追加する

謎のメッセージが出力されなくなる

```{r}
#| code-line-numbers: "4"
df |>
  group_by(Continent, G20) |>
  summarise(Mean_HDI = mean(HDI_2018, na.rm = TRUE),
            .groups  = "drop")
```

## 便利な関数) グループごとのケース数を計算

`summarise()`の中に`n()`を使用

```{r}
#| code-line-numbers: "5"
df |>
  group_by(Continent) |>
  summarise(Mean_PPP = mean(PPP_per_capita, na.rm = TRUE),
            SD_PPP   = sd(PPP_per_capita, na.rm = TRUE),
            Cases    = n())
```

## おまけ: 効率的な方法

`across()`関数を利用: 詳細は教科書[第14.1章](https://www.jaysong.net/RBook/datahandling2.html#summarise%E3%81%AB%E3%82%88%E3%82%8B%E8%A8%98%E8%BF%B0%E7%B5%B1%E8%A8%88%E9%87%8F%E3%81%AE%E8%A8%88%E7%AE%97)を参照

**例)** `df`の`Population`から`PPP`列まで平均値と標準偏差を計算し、結果の変数名は`元の変数名_Mean`、`元の変数名_SD`とする

```{r}
df |>
  summarise(across(Population:PPP,
                   .fns = list(Mean = ~mean(.x, na.rm = TRUE),
                               SD   = ~mean(.x, na.rm = TRUE))))
```

# 変数の計算

## 変数の計算

`mutate()`: データフレームの変数を用いた計算を行い、新しい列として追加

* 新しい列名として既存の列名を指定すると上書きされる
* 新しく追加された列は最後に位置する（指定可能）

```{r}
#| eval: false
データフレーム名 |>
  mutate(新しい列名 = 計算式)
```

**例)** `df`の`Population`を`Area`で割り（=人口密度）、`Density`という名の列として追加する

:::: {.columns}

::: {.column width="48%"}
#### {dplyr}を使わない方法

```{r}
#| eval: false
df$Density <- df$Population / df$Area
```
:::

::: {.column width="4%"}
:::

::: {.column width="48%"}
#### {dplyr}を使う方法

```{r}
#| eval: false
df |>
  mutate(Density = Population / Area)
```
:::

::::

## {dplyr}の例

**例)** `df`の`Population`を`Area`で割り（人口密度）、`Density`という名の列として追加する

* 新しく追加された列は最後に位置する
   * ただし、上書きの場合、位置はそのまま

```{r}
#| code-line-numbers: "2"
df |>
  mutate(Density = Population / Area) |>
  print(n = 5) # 最初の5行のみ出力
```

## 新しい列の位置指定

`mutate()`内に`.after`、または`.before`を指定

* `relocate()`関数と同じ仕組み（第9回）

**例)** `Population`を`Area`で割り、`Density`という名の新しい列`Area`の後に追加する。

```{r}
#| code-line-numbers: "3"
df |>
  mutate(Density = Population / Area, 
         .after  = Area)
```

## 変数の計算いろいろ（1）

各国が世界人口に占める割合を計算し、降順で出力

1. `df`の`Population`の合計を`Total_Pop`という列として追加する。
2. `Population`を`Total_Pop`で割り、100を掛ける。結果は`Share_Pop`という名の列として`Population`後に追加する。
3. `Country`から`Share_Pop`までの列のみ残す。
4. `Total_Pop`列を除外する。
5. `Share_Pop`が大きい順で行を並び替える

## 変数の計算いろいろ（1）

```{r}
df |> 
  # Total_Popを作らずにShare_Pop作成時に直接sum(Population)を入れてもOK
  mutate(Total_Pop = sum(Population),
         Share_Pop = Population / Total_Pop * 100,
         .after    = Population) |>
  select(Country:Share_Pop) |>
  select(!Total_Pop) |>
  arrange(desc(Share_Pop))
```

## 変数の計算いろいろ（2）

G7、G20、OECDのいずれかに加盟している国を「先進国」、それ以外は「その他」とし、二つのグループの人口密度、人間開発指数、民主主義度の平均値を出力する。

1. `df`を利用する
2. `Developed`という列を追加し、`G7`、`G20`、`OECD`のいずれかに加盟した国なら`"先進国"`、それ以外なら`"その他"`とする。
3. 人口密度を`Density`という名の列として追加する。
3. `HDI_2018`と`Polity_Score`のいずれかが欠損した行を除外する。
4. `Developed`変数でデータをグルーピングする。
5. `HDI_2018`、`Polity_Score`、`Density`の平均値を求める。
6. `df2`という名前のオブジェクトとして作業環境内に格納する。

## 変数の計算いろいろ（2）

```{r}
df2 <- df |>
  mutate(Developed = G7 + G20 + OECD,
         Developed = if_else(Developed > 1, "先進国", "その他"), # 上書き
         Density   = Population / Area) |>
  # filter()の代わりにdrop_na(HDI_2018, Polity_Score) もOK
  filter(!is.na(HDI_2018), !is.na(Polity_Score)) |> 
  group_by(Developed) |>
  summarise(Density = mean(Density),
            HDI     = mean(HDI_2018),
            Polity  = mean(Polity_Score))

df2
```

## `summarise()`の結果を並び替えたい

`df2`を`"先進国"` > `"その他"`の順番で表示させたい。

* `summarise()`を行う場合、グルーピング変数のアルファベット順で表示される。
* ただし、日本語の場合、50音順にはならない。
   * ひらがな、カタカナなら50音順になるが、漢字は $\times$
* したがって、`summarise()`の前にグルーピング変数を**Factor型に変換**する必要がある。
   * Factor型：**順序付き**の文字型

## `Developed`をFactor型に

* `Developed`列をfactor化し、要素の順番は`"先進国"`、`"その他"`の順にする。
   * `levels`で指定した順番

```{r}
#| code-line-numbers: "4"
df |>
  mutate(Developed = G7 + G20 + OECD,
         Developed = if_else(Developed > 1, "先進国", "その他"),
         Developed = factor(Developed, levels = c("先進国", "その他")),
         Density   = Population / Area) |>
  filter(!is.na(HDI_2018), !is.na(Polity_Score)) |>
  group_by(Developed) |>
  summarise(Density = mean(Density),
            HDI     = mean(HDI_2018),
            Polity  = mean(Polity_Score))
```

## 変数のリコーディング：2値の例

`mutate()`内に`if_else()`を使用

* `df`の`OECD`が`1`なら`"OECD加盟国"`、それ以外なら`"OECD非加盟国"`に変換し、`OECD_J`という列として追加

```{r}
#| eval: false
df |>
  mutate(OECD_J = if_else(OECD == 1, "OECD加盟国", "OECD非加盟国"))
```

**例)** 変換前

```{r}
df |>
  group_by(OECD) |>
  summarise(PPP = mean(PPP_per_capita, na.rm = TRUE),
            HDI = mean(HDI_2018, na.rm = TRUE),
            FH  = mean(FH_Total, na.rm = TRUE))
```

## 変数のリコーディング：2値の例

**例)** 変換後

```{r}
#| code-line-numbers: "2"
df |>
  mutate(OECD_J = if_else(OECD == 1, "OECD加盟国", "OECD非加盟国")) |>
  group_by(OECD = OECD_J) |> # 「=」で列名の変更が可能
  summarise(PPP = mean(PPP_per_capita, na.rm = TRUE),
            HDI = mean(HDI_2018, na.rm = TRUE),
            FH  = mean(FH_Total, na.rm = TRUE))
```

## 変数のリコーディング：3値以上の例

`mutate()`内に`case_when()`を使用

```r
データフレーム名 |>
  mutate(新しい変数名 = case_when(条件1 ~ 新しい値,
                               条件2 ~ 新しい値,
                               ...
                               .default = 新しい値))
```

* `.default = 新しい値`は「上記の条件全てが満たされ**ない**場合の値」を意味する。

## 変数のリコーディング：3値以上の例

**例)** `df`の`Continent`を日本語にし、`Continent_J`として追加

```{r}
df |>
  mutate(Continent_J = case_when(Continent == "Africa"  ~ "アフリカ",
                                 Continent == "America" ~ "アメリカ",
                                 Continent == "Asia"    ~ "アジア",
                                 Continent == "Europe"  ~ "ヨーロッパ",
                                 .default = "オセアニア")) |>
  group_by(大陸 = Continent_J) |>
  # 日本語は非推奨だが、一応使える（_と.を除く特殊記号不可）
  summarise(OECD加盟国比率 = mean(OECD),
            国家数        = n())
```

## 変数のリコーディング：応用

**例)** `Continent`が`AP`列を追加し、`"Asia"`か`"Oceania"`、`"America"`なら1、以外は0

**方法1**：`if_else()`の利用

```{r}
#| eval: false
df |>
  mutate(AP = if_else(Continent %in% c("Asia", "America", "Oceania"), 1, 0))
```

**方法2**：`case_when()`の利用

```{r}
#| eval: false
df |>
  mutate(AP = case_when(Continent == "Asia"    ~ 1, 
                        Continent == "America" ~ 1, 
                        Continent == "Oceania" ~ 1,
                        .default = 0))
```

**方法3**：`case_when()` + `%in%`の利用

```{r}
#| eval: false
df |>
  mutate(AP = case_when(Continent %in% c("Asia", "America", "Oceania") ~ 1, 
                        .default = 0))
```

## `NA`ではない欠損値もあることに注意

世論調査などの場合、欠損値が`NA`でなく、`9`や`99`、`""`などの場合があるため、自分で`NA`に変換する必要があるケースも多い。

- **例)** `my_data`の例
   - `YoungAge`変数を作成し、`Age`が39以下なら`1`、それ以外は`0`にする。
      - 欠損値は999
   - `HighEduc2`変数を作成し、`HighEduc`が1なら`"大卒以上"`、それ以外は`"大卒未満"`にする。
      - 欠損値は8と9

:::: {.columns}

::: {.column width=65%}
```{r}
my_data <- tibble(ID       = 1:10,
                  Age      = c(32, 35, 57, 999, 74, 
                               66, 999, 49, 78, 67),
                  HighEduc = c(1, 0, 0, 1, 0,
                               9, 1, 1, 8, 9))
```
:::

::: {.column width=35%}
```{r}
my_data
```
:::

::::

## 欠損値を指定する場合

* 戻り値として`NA`を指定（`if_else()`も同様）

```{r}
my_data |>
  mutate(YoungAge  = case_when(Age == 999 ~ NA,
                               Age <=  39 ~ 1,
                               .default   = 0),
         HighEduc2 = case_when(HighEduc >= 8 ~ NA,
                               HighEduc == 1 ~ "大卒以上",
                               .default      = "大卒未満"))
```

## 特定の値を欠損値にコーディング場合

特定の値を欠損値とし、それ以外の値は元も値にする場合

* 主に`if_else()`を使用し、条件に合致した場合は`NA`を、合致しない場合は元の変数のままにする。

```{r}
my_data |>
  mutate(Age      = if_else(Age      == 999, NA, Age),
         HighEduc = if_else(HighEduc >= 8,   NA, HighEduc))
```

## 特定の値を欠損値にコーディング場合

`if_else()`でなく、`case_when()`を使うことも可能

* 欠損を意味する値が複数の場合、`case_when()`を使うか、OR演算子（`|` / `%in%`）を用いた`if_else()`を使用する。

```{r}
my_data |>
  mutate(Age      = case_when(Age == 999 ~ NA, 
                              .default   = Age),
         HighEduc = case_when(HighEduc >= 8 ~ NA, 
                              .default      = HighEduc))
```

## 参考）特定の値を欠損値にコーディング場合

{naniar}パッケージの`replace_with_na()`関数を利用

* 引数はリスト型オブジェクトであり、リストの中には`変数名 = 欠損値の値`
* 欠損値の値が複数の場合、`変数名 = c(値1, 値2, ...)`
* 似たような関数として{expss}の`na_if()`関数

```{r}
library(naniar) # 事前に install.package(naniar) でインストール
my_data |>
  # Ageは999、HighEducは9が欠損値
  replace_with_na(list(Age = 999, HighEduc = c(8, 9)))
```

## 参考）`mutate()`における複数の処理

同じ内容のコードであるため、好きな書き方で問題ないが、まとめた方が効率的

#### 一つの`mutate()`内に2つの処理

```{r}
#| eval: false
my_data |>
  mutate(Age      = if_else(Age == 999, NA, Age),
         HighEduc = if_else(HighEduc >= 8, NA, HighEduc))
```

#### 一つの`mutate()`内に1つの処理

```{r}
#| eval: false
my_data |>
  mutate(Age = if_else(Age == 999, NA, Age)) |>
  mutate(HighEduc = if_else(HighEduc >= 8, NA, HighEduc))
```
