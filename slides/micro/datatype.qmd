---
subtitle: "第7回 データ型"
date: "2024/5/23"
format: revealjs
metadata-files: 
  - _slide.yml
---

# データ型

## データ型とは

```{r}
#| include: false
pacman::p_load(tidyverse, gt)
```

* Rにおける最小単位であるベクトル（vector）内の要素の種類
   * ベクトルはデータ構造（data structure）の一つ
   * $\bigcirc\bigcirc\bigcirc$型ベクトル呼ぶ。
      * 例) 全ての要素が数値型（numeric型）なら「numeric型ベクトル」
      * 例) 全ての要素が文字型（character型）なら「character型ベクトル」

## データ型の種類

以下のデータ型はRが提供しているデータ型の**一部**（太字は本講義で紹介するデータ型）

* **Logical**
* **Numeric**
* Complex
* **Character**
* **Factor**
* Date
* **NA**
* NULL
* その他

## データ型の確認

`class()`関数を使用

* オブジェクトがベクトルの場合はデータ**型**が出力され、ベクトル以外の場合はデータ**構造**が出力される。

```{r}
my_vec1 <- c(2, 3, 5, 7, 11)
my_vec2 <- c("Ramen", "Soba", "Udon")
my_vec3 <- c(TRUE, TRUE, FALSE, FALSE)
```

<br/>

```{r}
class(my_vec1) # my_vec1のデータ型は?
class(my_vec2) # my_vec2のデータ型は?
class(my_vec3) # my_vec3のデータ型は?
```

# Logical型

## Logical型: 紹介

* `TRUE`と`FALSE`のみで構成されるデータ型
   * 論理型とも呼ばれる。

```{r}
logi_vec1 <- (2 + 3) == (2 * 3)
logi_vec1
```

<br/>

* `logi_vec1`のデータ型の確認

```{r}
class(logi_vec1)
```

<br/>

* あるベクトルがlogical型かどうかは`is.logical()`で確認可能。
   * `()`内のオブジェクトがlogical型なら`TRUE`、それ以外は`FALSE`が返ってくる。

```{r}
is.logical(logi_vec1)
```

## Logical型: 作成

* 長さ2以上のlogical型ベクトルを作成する場合、`c()`を使用
   * `TRUE`と`FALSE`は`"`で囲んではいけない（character型として認識される）。

```{r}
logi_vec2 <- c(TRUE, FALSE, TRUE, TRUE, FALSE)
```

* ただし、このように直接logical型ベクトルを作成することは非常に稀であり、通常、論理演算子の計算から得られた結果で作成する。

```{r}
my_vec4 <- 1:15
logi_vec3 <- my_vec4 %% 3 == 0 # my_vec4の要素は3で割り切れるか
```

## Logical型: 活用

* 何かの条件（=論理演算子）に合致する要素のみを抽出する際に使用

```{r}
my_vec4[logi_vec3]
```

<br/>

* Logical型ベクトルを作成せず、`[]`内に直接打ち込んでも良い

```{r}
# my_vec4の要素の中から3で割り切れる要素（=3の倍数）を抽出する。
my_vec4[my_vec4 %% 3 == 0]
```

# Numeric型

## Numeric型

* 第3回講義を参照

# Character型

## Character型: 紹介&作成

* 要素が`"`で囲まれているデータ型
   * 文字型とも呼ばれる。
   * 長さ2以上のcharacter型のベクトル作成は`c()`を使用

```{r}
char_vec1 <- c("Kansai", "Kwansei-gakuin", "Doshisha", "Ritsumeikan")
char_vec1
```

<br/>

* `char_vec1`のデータ型の確認

```{r}
class(char_vec1)
```

<br/>

* あるベクトルがcharacter型かどうかは`is.character()`で確認可能。
   * `()`内のオブジェクトがlogical型なら`TRUE`、それ以外は`FALSE`が返ってくる。

```{r}
is.character(char_vec1)
```

## Character型: 活用

* 文字列の長さ
   * `length()`: ベクトルの長さ
   * `nchar()`: 各要素の文字数

```{r}
length(char_vec1) # char_vec1の長さ
nchar(char_vec1)  # char_vec1の各要素の文字数
```

* `paste()`: 文字列の結合
   * `paste0()`にすると、結合時、スペースが入らない。

```{r}
# 各要素の後にUniversityを付ける（スペースあり）
char_vec2 <- paste(char_vec1, "Univeristy")
char_vec2
```

# Factor型

## Factor型

* 順序付き文字型
   * 主に図表を作成する際に使用する。

::: {.panel-tabset}

### データ

列名の下が`<chr>`ならcharacter型、`<fct>`ならfactor型

:::: {.columns}

::: {.column width="45%"}

`大学名`がcharacter型の場合

```{r}
#| echo: false
df <- tibble(大学名 = c("Ritsumeikan", "Kwansei-gakuin", "Kansai", "Doshisha"),
             学生数 = c(32467, 23671, 27736, 25974))
df
```

:::

::: {.column width="10%"}
:::

::: {.column width="45%"}

`大学名`がfactor型の場合

* 順番は関西-関学-同志社-立命館

```{r}
#| echo: false
df |>
  mutate(大学名 = factor(大学名, levels = c("Kansai", "Kwansei-gakuin",
                                      "Doshisha", "Ritsumeikan")))
```

:::

::::

### 行のソート

行のソートについてはデータ・ハンドリングの講義にて解説

:::: {.columns}

::: {.column width="45%"}

`大学名`がcharacter型の場合

* アルファベット順になる。

```{r}
#| echo: false
df |>
  arrange(大学名)
```

:::

::: {.column width="10%"}
:::

::: {.column width="45%"}

`大学名`がfactor型の場合

* 予め指定した順番で表示される。

```{r}
#| echo: false
df |>
  mutate(大学名 = factor(大学名, levels = c("Kansai", "Kwansei-gakuin",
                                      "Doshisha", "Ritsumeikan"))) |>
  arrange(大学名)
```

:::

::::

### 可視化

作図については可視化の講義にて解説

:::: {.columns}

::: {.column width="49%"}

`大学名`がcharacter型の場合

* アルファベット順になる。

```{r}
#| echo: false
df |>
  ggplot() +
  geom_bar(aes(x = 大学名, y = 学生数), stat = "identity") +
  theme_bw(base_size = 24)
```

:::

::: {.column width="2%"}
:::

::: {.column width="49%"}

`大学名`がfactor型の場合

* 予め指定した順番で表示される。

```{r}
#| echo: false
df |>
  mutate(大学名 = factor(大学名, levels = c("Kansai", "Kwansei-gakuin",
                                      "Doshisha", "Ritsumeikan"))) |>
  ggplot() +
  geom_bar(aes(x = 大学名, y = 学生数), stat = "identity") +
  theme_bw(base_size = 24)
```

:::

::::

:::

## Factor型: 作成 (1)

* Character型からfactor型へ

```{r}
char_vec3 <- c("Ritsumeikan", "Kwansei-gakuin", "Kansai", "Doshisha")
char_vec3
class(char_vec3)
```

* 要素をソートしてみると、アルファベット順になる。
   * `sort()`関数を使用

```{r}
sort(char_vec3)
```

## Factor型: 作成 (2)

* `factor()`関数でfactor化
   * `levels`引数に順番を指定すること
   * factor型ベクトルを出力すると水準 (level)の順番も下に表示される。

```{r}
fct_vec1 <- factor(char_vec3, 
                   levels = c("Kansai", "Kwansei-gakuin", "Doshisha", "Ritsumeikan"))
fct_vec1
class(fct_vec1)
```

* 要素をソートしてみると、予め指定した順番になる。

```{r}
sort(fct_vec1)
```

## Factor型: 作成 (3)

* Numeric型変数のFactor化
   * `factor()`内に`levels`と`labels`を両方指定する（Charactrer型のfactor化は`levels`のみで十分）。
   * 多くのデータはサイズを小さくするために、文字列より数値を使用する。
   * たとえば、「北海道」は「1」、「青森県」は「2」、...、「沖縄県」は「47」のように
* **例）**男性は1、女性が2の場合、各値にラベルを付け、順番を女性、男性にする場合

```{r}
gender_vec <- c(2, 2, 1, 2, 1, 1, 1, 1, 2)
gender_vec
gender_fct <- factor(gender_vec, levels = c(2, 1), labels = c("女性", "男性"))
gender_fct
```

## Factor型: 活用

* 詳細はデータハンドリング、および可視化の講義で説明

# 欠損値

## 欠損値

* **欠損値**（missing value）
   * 何らかの値があるはずであるものの、観察されていない値である。
   * 例) 人間開発指数（Human Development Index; HDI）」では世界各国のデータが含まれているものの、台湾や北朝鮮のデータは含まれていない。これらの国（地域）に人間開発という概念がないわけではなく、なんらかの理由（今回は政治的な理由）で値が欠損しているだけ

<br/>

* 欠損値以外に計算上、何らかの問題を生じさせ得る値

|値|意味|例|
|:---|:---|:---|
|`NA`|何らかの値があるはずだが、欠損している状態||
|`NULL`|そもそも存在しない||
|`NaN`|計算不可|`0 / 0`|
|`Inf`|無限大|`10 / 0`|

## NAとNULL (1)

```{r}
Vec1 <- c(1, 2, 3, 5, 7, 11, 13)
Vec2 <- c(1, NA, 3, 5, NA, NA, 13)
Vec3 <- c(1, NULL, 3, 5, NULL, NULL, 13)
```

<br/>

```{r}
Vec1
Vec2
Vec3
```

```{r}
length(Vec1)
length(Vec2)
length(Vec3)
```

## NAとNULL (2)

初心者レベルで`NULL`を使うことはないが、中級以上からは（そこそこ）使う機会がある。

![](Figs/datatype/NA_NULL.png){width=65% fig-align="center"}

## 欠損値が含まれたベクトルの動き

* `mean()`関数で`Vec2`の平均値を計算してみよう。

```{r}
mean(Vec2)
```

* コンソール上で`?mean`を入力し、`mean()`関数の詳細について調べてみると、`mean()`関数で使用可能な引数の一覧が表示される。

```
na.rm    a logical value indicating whether NA values should be stripped before 
         the computation proceeds.
```

* 意味: 「`na.rm`はlogical型の値であり、計算の前に欠損値（`NA`）を除去するか否かを示す引数である。」

<br/>

```{r}
mean(Vec2, na.rm = TRUE)
```

* このように一部の関数では欠損値が含まれているオブジェクトの計算ができないため、おかしいと思ったらヘルプを読んでみること。

# ベクトル内要素の操作

## 共通: 要素の追加

```{r}
my_vec5 <- c(4, 3, 2, 1)
my_vec5
```

* `my_vec5`の5番目の要素として、0を追加

```{r}
my_vec5[5] <- 0
my_vec5
```

* `my_vec5`の6、7、8番目の要素として、-1、-2、-3を追加

```{r}
# 6:8の代わりにc(6, 7, 8)もOK
my_vec5[6:8] <- c(-1, -2, -3)
my_vec5
```

* `my_vec5`の11番目に10を入れたら?

```{r}
my_vec5[11] <- 10
my_vec5
```

## 共通: 要素の置換

* 要素の追加と方法は同じ

```{r}
my_vec5[11] <- -6
my_vec5
```

* 複数の要素を置換する場合

```{r}
my_vec5[9:10] <- c(-4, -5)
my_vec5
```

* `my_vec5`の要素の中から0より小さい要素に-1を掛けて置換する。

```{r}
my_vec5[my_vec5 < 0] <- my_vec5[my_vec5 < 0] * -1
my_vec5
```
