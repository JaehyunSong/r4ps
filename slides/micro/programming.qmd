---
subtitle: "第4回 Rプログラミングの基本的な概念"
date: "2023/4/27"
format: revealjs
metadata-files: 
  - _slide.yml
---

# ファイルシステム

## ほにゃほにゃ

# プログラミングの基礎概念

## プログラミングの基礎概念

* オブジェクト（object）
* クラス（class）
* 関数（function）
* 引数
   * 仮引数（parameter）と実引数（argument）

## オブジェクト

**オブジェクト (object) **: メモリに割り当てられた「何か」

* ベクトル (vector)、行列 (matrix)、データフレーム (data frame)、リスト (list)、関数 (function) など
* それぞれ固有の（=他のオブジェクトと重複しない）名前が付いている。
* 1から5までの自然数の数列を`my_vec1`という名前のオブジェクトとして格納

```{r}
my_vec1 <- c(1, 2, 3, 4, 5) # my_vec1 <- 1:5  も同じ
```

<br/>

**Rに存在するあらゆるものはオブジェクトである**（Chambers 2016）

* "Everything that exists in R is an object"

```{r}
#| eval: false
my_vec1 * 2
```

* 以上のコードの場合、`2`もオブジェクト
   * 計算が終わった瞬間、メモリから削除されるだけ
* 演算子`*`もオブジェクト

## クラス

**クラス (class)**: オブジェクトを特徴づける属性

* `class()`関数で確認可能
* すべてのオブジェクトは何らかのクラスを持つ

```{r}
class(my_vec1) # my_vec1 のクラス
class(2)       # 2 のクラス
class(`*`)     # * のクラス
class(class)   # class() のクラス
```

## なぜクラスが重要か

* ある関数の引数（後述）には使用可能なクラスが指定されている。
* `?関数名`で確認可能
* `mean()`関数の例（Consoleペイン上で`?mean`）
   * `mean()`に使用可能な引数は`x`、`trim`、`na.rm`
   * `x`: numeric型ベクトル、logical型ベクトルなどが使用可能
   * `na.rm`: 長さ1のlogical型ベクトル（a logical value）のみ使用可能

```r
mean(c(1, 2, 3, NA, 5), na.rm = TRUE)
```

* 関数を使いこなすためには関数のヘルプを確認する
   * 必要な引数、返されるデータの構造、サンプルコードなど豊富な情報が載っている。

## 関数と引数

**関数 (function)**: 入力されたデータを内部で決められた手順に従って処理し、その結果を返すもの

* Rで起こるあらゆることは関数の呼び出しである (Chambers, 2016)
   * Everything that happens in R is a function call。
* 使い方: `関数名(関数の入力となるオブジェクト)`
   * 例) `class(my_vec1)`、`sum(my_vec1)`
* 自分で関数を作成することも可能
* 関数には**引数（ひきすう）**が必要

## 引数

`sum()`関数の例

```r
sum(c(1, 2, 3, NA, 5), na.rm = TRUE)
```

* 関数名は`sum`
* **仮引数 (parameter)**: `na.rm`
* **実引数 (argument)**: `c(1, 2, 3, NA, 5)`、`TRUE`
   * `c(1, 2, 3, NA, 5)`の仮引数名はない（ヘルプを見ると`...`と表示される）。このように仮引数名が存在しないケースもある。


* 第一引数の仮引数は省略するケースが多い
* 第二引数以降は仮引数名を明記（実引数がどの仮引数に対応するかを明示）
   * 関数によっては引数は数十個ある場合も
* 引数には既定値 (default value)が指定されているものもあり、省略可能。既定値がない引数はすべて指定する。
   * たとえば、`mean()`の`trim`引数の既定値は`0`（`?mean`参照）
   * Usageに`仮引数 = 実引数`と表記されている場合、既定値が存在する
   * Arguemntsにan optional...と書いていれば、既定値はないが、指定しなくても関数は動くことを意味する。

## コーディング・スタイル

* オブジェクト名の付け方
* 改行
* スペースと字下げ（インデント）
* 代入の演算子は`=`でなく、`<-`を使用

<br/>

#### 参考

* [The tidyverse style guide](https://style.tidyverse.org/)
* [Google’s Style Guide](https://google.github.io/styleguide/Rguide.html)
* {styler}パッケージと{lintr}パッケージ

## オブジェクト名（1）

**原則1:** オブジェクト名は英数字と一部の記号（`_`と`.`）のみにする

* ローマ字以外の文字も使える場合もあるが、**絶対**に使わないこと！

```{r}
variable1 <- "R is fun!"
variable1
変数2 <- "Rは楽しいよ！"
変数2
へんすう3 <- "Rはええでー"
へんすう3
변수4 <- "매일 아침 눈을 뜨면 R부터 기동시킵니다."
변수4
```

## オブジェクト名（2）

**原則2:** 数字で始まる変数名、記号が含まれた変数名は指定できない

* 裏技で使うことも可能だが、なるべく使わないこと

```{r}
#| error: true
100ABC <- c(1, 2, 3, 5, 7, 11)
```

```{r}
#| error: true
Smile^^ <- "マクドでスマイルを頼んでみたい！"
```

```{r}
#| error: true
Weather_2022/03/30 <- "最高気温22度"
```

**ただし**、`_`と`.`は使用可能であり、`.`より`_`を推奨

```{r}
Weather_2022_03_30 <- "最高気温22度"
Weather_2022_03_30
```

## オブジェクト名（3）

**原則3:** 予約語を避ける

* Rがデフォルトで提供する組込の関数やオブジェクトと重複する名前を自分で作成するオブジェクトに付けることは避ける（できない場合もある）。
   * **例)** `pi`（円周率）、`if`、`for`など

**例1:** 指定は出来るが、非推奨

```{r}
pi # 円周率
```

```{r}
pi <- "3月14日はpie day!"
pi # もはや円周率ではない
```

**例2:** そもそも指定できない

```{r}
#| error: true
for <- "フォー！"
```

## オブジェクト名（4）

**原則4:** 短さと分かりやすさの両立

* オブジェクト名を付けるセンスはプログラマーのレベルが測れる指標の一つ

**例1:** 変数の中身を見るまでは、どのような内容が入っているか分からない

```{r}
#| eval: false
var2   <- c("female", "male", "male", "female") # 分かりにくい
gender <- c("female", "male", "male", "female") # 分かりやすい
```

<br/>

**例2:** 長すぎて今後、打つのが面倒くさい

```{r}
#| eval: false
mathematicsscore <- c(30, 91, 43, 77, 100) # 長い!!
MathScore        <- c(30, 91, 43, 77, 100) # 大文字キャメルケース
mathScore        <- c(30, 91, 43, 77, 100) # 小文字キャメルケース
math_score       <- c(30, 91, 43, 77, 100) # スネークケース
```

# コーディング・スタイル

## コーディング・スタイル

ほにゃほにゃ

* 改行
* 字下げ
* スペース
* 名前（オブジェクト名）の付け方など

## 改行

* コードは1行が長すぎないように適宜改行すること。
   * 1行に何文字までするかはモニター・サイズと相談すること（昔は80文字という非公式的なルールがあった）。

**良い例:** 改行あり

```{r}
#| eval: false
fit1 <- glm(Voted ~ Female + Age + Education + Income + Region +
              Attitude1 + Attitude2 + Attitude3, 
            family = binomial("logit"), data = my_data)
```

**悪い例:** 改行なし

```{r}
#| eval: false
fit1 <- glm(Voted ~ Female + Age + Education + Income + Region + Attitude1 + Attitude2 + Attitude3, family = binomial("logit"), data = my_data)
```

![](Figs/programming/punchcard.png){width=65% fig-align="center"}

## スペースと字下げ（1）

* コードが長くなるほどスペースの字下げは重要
* 全ての演算子の前後には**半角**スペースを入れる。
   * `+`、`-`、`*`、`%%`、`&`、`|`、`<-`など
   * ただし、`^`は例外
   * 全角スペースは絶対に使わないこと
* 同じブロック（`()`、`{}`）内なら字下げも可読性の観点から重要
   * ただし、字下げはRStudioを手伝ってくれる。

**良い例:**

```{r}
#| eval: false
sum(my_vec2, na.rm = TRUE)
```

**悪い例:**

```{r}
#| eval: false
sum(my_vec2,na.rm=TRUE)
```

## スペースと字下げ（2）

以下のコードは全て同じであるが、可読性が桁違い（表形式データ作成の例）

**良い例:** 改行あり、字下げあり、スペースあり

```{r}
#| eval: false
data.frame(
  name     = c("Song",  "Yanai", "Wickham"),
  favorite = c("Ramen", "Cat",   "R"),
  gender   = c("Male",  "Male",  "Male")
)
```

**悪い例:** 改行あり、字下げなし、スペースあり

```{r}
#| eval: false
data.frame(
name = c("Song", "Yanai", "Hadley"),
favorite = c("Ramen", "Cat", "R"),
gender = c("Male", "Male", "Male")
)
```

**邪悪な例:** 改行なし（=字下げなし）、スペースなし

```{r}
#| eval: false
data.frame(name=c("Song","Yanai","Hadley"),favorite=c("Ramen","Cat","R"),fender=c("Male","Male","Male"))
```

# 本格的なプログラミングの世界へ

## 本格的なプログラミングの世界へ

中級者以上を目指すなら以下のようなプログラミングの知識は必須であるものの、本講義では一部を除き、解説しない。

詳細は[教科書の第10章](https://www.jaysong.net/RBook/programming.html)を参照

* 反復
   * `for()`
   * `while()`
* 条件分岐
   * `if()`、`else if()`、`else()`
   * `ifelse()`（$\simeq$ `if_else()`）
      * 本講義ではかなり頻繁に使うため、第9回以降に解説する。
   * `switch()`

## プログラミングは簡単だから難しい

チューリング完全な言語の2条件

* **データの読み書き**
* **条件分岐**
* データの読み書きと条件分岐を組み合わせると**反復処理**が可能

<br/>

#### プログラミングが簡単な理由

データの読み書き、条件分岐、反復処理を覚えるだけで、パソコンで出来るすべてのことができる。

<br/>

#### プログラミングが難しい理由
データの読み書き、条件分岐、反復処理だけですべてを処理しなければならない。

## 例) Bubble Sortアルゴリズム

* 代入（`<-`）、条件分岐（`if()`）、反復（`for()`）だけでベクトルのソート

```{r}
#| code-line-numbers: "|2,6,7,8|5|3,4"
bubble_sort <- function(x){
  n <- length(x)
  for (i in 1 : (n - 1)) {
    for (j in 1 : (n - i)) {
      if (x[j] > x[j + 1]) {
        temp <- x[j]
        x[j] <- x[j + 1]
        x[j + 1] <- temp
      }
    }
  }
  return(x)
}
```

<br/>

```{r}
x <- c(4, 2, 6, 3, 1, 11, 5, 9)
bubble_sort(x)
```