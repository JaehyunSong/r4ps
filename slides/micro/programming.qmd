---
subtitle: "第4回 Rプログラミングの基本的な概念"
date: "2023/4/27"
format: revealjs
metadata-files: 
  - _slide.yml
---

# ファイルシステム {visibility="uncounted"}

```{css}
#| echo: false
div.cell-output > pre > code {
  max-height: initial;
}
```

## ファイル・システムとは

（本講義の内容に限定すると）パソコン内のファイルのあり方

* PCには数万以上のファイルが存在する。
* これらのファイルは一つに部屋に存在するのではなく、複数の**フォルダー**[^folder]（folder）に分かれて保存されている。
   * この授業の履修者もそれぞれの授業に関するファイルを一つの箇所でなく、科目名のフォルダーを作ってその中に保存しているはず。
   * フォルダーの概念がないと...
      1. 同じファイル名が使えない。
      2. 管理が大変
      3. 欲しいファイルが見つけにくいなどデメリットしかない。
* 最近のソフトウェア/アプリではファイルの選択をフォルダーをクリックしながら行うが、R/Python/C/Javaなどでは**ファイルの位置（$=$パス$\simeq$住所）を直接書く**必要がある。

[^folder]: フォルダーは**ディレクトリー**（directory）とも呼ばれる。

## パス（path）の書き方

::::{.columns}
:::{.column width=35%}
```{r}
#| echo: false
pacman::p_load(tidyverse, data.tree, plyr)
paths <- c(".",
           "./ReadMe.docx",
           "./Day01/Day01.Rproj",
           "./Day01/Script01.R",
           "./Day01/Script02.R",
           "./Day01/Data/raw_data.csv",
           "./Day01/Data/cleaned_data.csv",
           "./Day01/Figs/Figure01.png",
           "./Day01/Figs/Figure02.png",
           "./Day02/Day02.Rproj",
           "./Day02/Script01.R",
           "./Day02/Document01.qmd",
           "./Day02/Document01.html",
           "./Day02/Data/my_data.csv",
           "./Day02/Figs/Old/Figure01.pdf",
           "./Day02/Figs/Old/Figure02.pdf",
           "./Day02/Figs/Old/Figure03.pdf",
           "./Day02/Figs/New/Figure01.png")
x <- lapply(strsplit(paths, "/"), function(z) as.data.frame(t(z)))
x <- rbind.fill(x)
x$pathString <- apply(x, 1, function(x) paste(trimws(na.omit(x)), collapse="/"))
data.tree::as.Node(x)
```
:::

:::{.column width=65%}
以下はJDCat分析ツールと同じLinuxの書き方（macOSも同様）

* 通常、ファイル＆フォルダーの構造はツリー（tree）構造で表現される。
* パスは`/`（最上位フォルダー）で始まり、フォルダーは`/`で区切る。
   * 最後はファイル名
* 2行目のファイル
   * `/ReadMe.docx`
* 6行目のファイル
   * `/Day01/Script02.R`
* 9行目のファイル
   * `/Day01/Data/cleaned_data.csv`
* 26行目のファイル
   * `/Day02/Figs/New/Figure01.png`
:::
::::

## 絶対パスと相対パス

::::{.columns}
:::{.column width=35%}
```{r}
#| echo: false
pacman::p_load(tidyverse, data.tree, plyr)
paths <- c(".",
           "./ReadMe.docx",
           "./Day01/Day01.Rproj",
           "./Day01/Script01.R",
           "./Day01/Script02.R",
           "./Day01/Data/raw_data.csv",
           "./Day01/Data/cleaned_data.csv",
           "./Day01/Figs/Figure01.png",
           "./Day01/Figs/Figure02.png",
           "./Day02/Day02.Rproj",
           "./Day02/Script01.R",
           "./Day02/Document01.qmd",
           "./Day02/Document01.html",
           "./Day02/Data/my_data.csv",
           "./Day02/Figs/Old/Figure01.pdf",
           "./Day02/Figs/Old/Figure02.pdf",
           "./Day02/Figs/Old/Figure03.pdf",
           "./Day02/Figs/New/Figure01.png")
x <- lapply(strsplit(paths, "/"), function(z) as.data.frame(t(z)))
x <- rbind.fill(x)
x$pathString <- apply(x, 1, function(x) paste(trimws(na.omit(x)), collapse="/"))
data.tree::as.Node(x)
```
:::

:::{.column width=65%}
* **絶対パス**：必ず最上位フォルダー（`/`）から始まるパス
   * 長い
* **相対パス**：作業フォルダーを基準としたパス
   * 短い（作業フォルダーまでのパスが省略される）
   * `/`で始まらない
* 作業フォルダーが`/Day01/`の場合
   * 6行目のファイル
      * 絶対パス：`/Day01/Script02.R`
      * 相対パス：`Script02.R`
   * 9行目のファイル
      * 絶対パス：`/Day01/Data/cleaned_data.csv`
      * 相対パス：`Data/cleaned_data.csv`
* 相対パスの方が短いため、より効率的なコーディングが可能に
   * フォルダー構造が複雑であるほど、相対パスが効率的
   * 作業フォルダーってどう指定すれば良いだろう
      * $\Rightarrow$ **プロジェクト機能**
   * 現在の作業フォルダーはRコンソール上で`getwd()`を入力すれば確認可能
:::
::::

## プロジェクト機能

RStudioのプロジェクト機能

* 作業フォルダー（working directory/working folder）が任意のフォルダーに固定される。
   * 固定先は`プロジェクト名.Rproj`ファイルが位置するフォルダー
* プロジェクト機能を使用中の場合、RStudioの右上にプロジェクト名が表示される。
   * 使っていない場合は、Project: (none)と表示される。
* プロジェクト機能のメリット
   * 相対パスを使用することによって、パスをより簡潔に表現できる。
   * ローカル版のR/RStudioを使う場合、プロジェクトをDropbox等に入れておくと、どこでも作業を再開することができる。
      * 相対パスを使う = パスの書き方が変わらない
      * macOS $\leftrightarrow$ Windowsのクロスプラットフォームも可能
* プロジェクト機能のデメリット
   * なし（ただし、これまでプロジェクト機能を使ってこなかった自分のことが嫌いになる可能性がある）

## プロジェクトの作成

:::{.panel-tabset}
## Step 1

File > New Project...を選択

![](Figs/programming/proj-create1.png){fig-align="center"}

## Step 2

New Directoryを選択

![](Figs/programming/proj-create2.png){width=50% fig-align="center"}

## Step 3

New Projectを選択

![](Figs/programming/proj-create3.png){width=50% fig-align="center"}

## Step 4

プロジェクト名を入力し、Create Project

* プロジェクト名は**英字・数字のみ**使用（スペース禁止; 記号は`_`のみ使用）

![](Figs/programming/proj-create4.png){width=50% fig-align="center"}

## Step 5

プロジェクトを確認する

![](Figs/programming/proj-create5.png){fig-align="center"}
:::

## プロジェクトの確認

RStudioの右上を確認

* 何かしら計算/分析の結果を残しておきたい場合は必ずプロジェクト機能を使う。
* 電卓程度の用途なら不要

:::{layout-ncol=2}
![プロジェクト未使用](Figs/programming/proj_check1.png)

![Homeworkという名のプロジェクト使用中](Figs/programming/proj_check2.png)
:::

## プロジェクトの再開

:::{.panel-tabset}
## Step 1
File > Open Project...を選択

![](Figs/programming/proj-open1.png){fig-align="center"}

## Step2

プロジェクト名のフォルダーをダブルクリックし、`.Rproj`ファイルをダブルクリック

![](Figs/programming/proj-open2.png){width=50% fig-align="center"}
:::

# 作業環境 {visibility="uncounted"}

## 作業環境（Environment）

* R/RStudioを起動すると、Rセッションが開始され、作業環境が生成される。
* 作業環境内には自分が作成したオブジェクト（後述）や読み込んだパッケージが格納される。
* 「R/RStudioの終了」 = 「Rセッションの終了」を意味し、**作業環境がリセット**される。
   * コードをスクリプトファイルとして保存しておく必要性
      * 保存したコードを開き、実行すれば再現可能
   * パッケージも再度読み込む必要がある（インストールはしなくても良い）。

## ものづくりに例えると...

1. R/RStudioの起動（Rセッションの開始）
   * 作業台を用意する。
2. パッケージのインストール
   * 作業に必要な工具を購入し、倉庫に入れておく。
   * したがって、インストールは1回のみで十分（アップデートを除く）
3. パッケージの読み込み
   * 倉庫内の工具を取り出し、作業台に乗せる。
4. データの読み込み
   * 素材を取り出し、作業台に乗せる。
5. オブジェクトの格納（`<-`演算子使用）
   * 加工した素材、結果物を作業台に乗せる。
6. R/RStudioの終了（Rセッションの終了）
   * 工具を倉庫に戻す。
   * 加工した素材、結果物を廃棄する。
      * 別途保存したコードスクリプト、図、表、文書、データなどは消えない（これらは作業環境外に搬出されたもの）。
      * コードのスクリプトを残しておけば、それを実行することで同じ結果物が得られる。
   * 作業台を撤去する。

## 作業環境の確認

* `ls()`：作業環境内のオブジェクトリストを出力
   * こちらのオブジェクトはRを終了すると消える。

```{r}
#| include: false
rm(list = ls())
```

```{r}
my_vec1 <- c(1, 3, 5)
my_vec2 <- c(FALSE, FALSE, TRUE, TRUE, FALSE)
my_vec3 <- "Cat"

ls()
```

* `(.packages())`：読み込まれたパッケージのリストを出力
   * こちらのパッケージはRを終了すると取り外される（再読込すれば良い）。

```{r}
#| eval: false
(.packages()) # Rのコアパッケージは最初から読み込まれている。
```

```{r}
#| echo: false
cat('[1] "stats"     "graphics"  "grDevices" "utils"     "datasets"  "methods"   "base"')
```

```{r}
#| eval: false
library(tidyverse) # {tidyverse}の依存パッケージも一緒に読み込まれる。

(.packages())
```

```{r}
#| echo: false
cat(
   '[1] "lubridate" "forcats"   "stringr"   "dplyr"     "purrr"     "readr"     "tidyr"    
[8] "tibble"    "ggplot2"   "tidyverse" "stats"     "graphics"  "grDevices" "utils"    
[15] "datasets"  "methods"   "base" '
   )
```

# プログラミングの基礎概念 {visibility="uncounted"}

## プログラミングの基礎概念

* オブジェクト（object）
* クラス（class）
* 関数（function）
* 引数
   * 仮引数（parameter）と実引数（argument）

## オブジェクト

**オブジェクト (object) **: メモリに割り当てられた「何か」

* ベクトル (vector)、行列 (matrix)、データフレーム (data frame)、リスト (list)、関数 (function) など
* それぞれ固有の（=他のオブジェクトと重複しない）名前が付いている。
* 1から5までの自然数の数列を`my_vec1`という名前のオブジェクトとして格納

```{r}
my_vec1 <- c(1, 2, 3, 4, 5) # my_vec1 <- 1:5  も同じ
```

<br/>

**Rに存在するあらゆるものはオブジェクトである**（Chambers 2016）

> "Everything that exists in R is an object"

```{r}
#| eval: false
my_vec1 * 2
```

* 以上のコードの場合、`2`もオブジェクト
   * 計算が終わった瞬間、メモリから削除されるだけ
* 演算子`*`もオブジェクト

## クラス

**クラス (class)**: オブジェクトを特徴づける属性

* `class()`関数で確認可能
* すべてのオブジェクトは何らかのクラスを持つ

```{r}
class(my_vec1)    # my_vec1 のクラス
class(2)          # 2 のクラス
class(c(1, 2, 3)) # c(1, 2, 3)
class(`*`)        # * のクラス
class(class)      # class() のクラス
```

## なぜクラスが重要か

1. ある関数の引数（後述）には使用可能なクラスが指定されている。
   * `?関数名`で確認可能
   * `mean()`関数の例（Consoleペイン上で`?mean`）
      * `mean()`に使用可能な引数は`x`、`trim`、`na.rm`
      * `x`: numeric型ベクトル、logical型ベクトルなどが使用可能
      * `na.rm`: 長さ1のlogical型ベクトル（a logical value）のみ使用可能
      * `mean(c(1, 2, 3, NA, 5), na.rm = TRUE)`
   * 関数を使いこなすためには関数のヘルプを確認する
      * 必要な引数、返されるデータの構造、サンプルコードなど豊富な情報が載っている。
2. 同じ関数でもクラスによって動きが変わる。

## 関数と引数

**関数 (function)**: 入力されたデータを内部で決められた手順に従って処理し、その結果を返すもの

* Rで起こるあらゆることは関数の呼び出しである (Chambers, 2016)
   * Everything that happens in R is a function call。
* 使い方: `関数名(関数の入力となるオブジェクト)`
   * 例) `class(my_vec1)`、`sum(my_vec1)`
* 自分で関数を作成することも可能
* 関数には**引数（ひきすう）**が必要

## 引数

`sum()`関数の例

```r
sum(c(1, 2, 3, NA, 5), na.rm = TRUE)
```

* 関数名は`sum`
* **仮引数 (parameter)**: `na.rm`
* **実引数 (argument)**: `c(1, 2, 3, NA, 5)`、`TRUE`
   * `c(1, 2, 3, NA, 5)`の仮引数名はない（ヘルプを見ると`...`と表示される）。このように仮引数名が存在しないケースもある。


* 第一引数の仮引数は省略するケースが多い
* 第二引数以降は仮引数名を明記（実引数がどの仮引数に対応するかを明示）
   * 関数によっては引数は数十個ある場合も
* 引数には既定値 (default value)が指定されているものもあり、省略可能。既定値がない引数はすべて指定する。
   * たとえば、`mean()`の`trim`引数の既定値は`0`（`?mean`参照）
   * Usageに`仮引数 = 実引数`と表記されている場合、既定値が存在する
   * Arguemntsにan optional...と書いていれば、既定値はないが、指定しなくても関数は動くことを意味する。

# コーディング・スタイル {visibility="uncounted"}

## コーディング・スタイル

* オブジェクト名の付け方
* 改行
* スペースと字下げ（インデント）
* 代入の演算子は`=`でなく、`<-`を使用

<br/>

#### 参考

* [The tidyverse style guide](https://style.tidyverse.org/)
* [Google’s Style Guide](https://google.github.io/styleguide/Rguide.html)
* {styler}パッケージと{lintr}パッケージ

## オブジェクト名（1）

**原則1:** オブジェクト名は英数字と一部の記号（`_`と`.`）のみにする

* ローマ字以外の文字も使える場合もあるが、**絶対**に使わないこと！

```{r}
variable1 <- "R is fun!"
variable1
変数2 <- "Rは楽しいよ！"
変数2
へんすう3 <- "Rはええでー"
へんすう3
변수4 <- "매일 아침 눈을 뜨면 R부터 기동시킵니다."
변수4
```

## オブジェクト名（2）

**原則2:** 数字で始まる変数名、記号が含まれた変数名は指定できない

* 裏技で使うことも可能だが、なるべく使わないこと

```{r}
#| error: true
100ABC <- c(1, 2, 3, 5, 7, 11)
```

```{r}
#| error: true
Smile^^ <- "マクドでスマイルを頼んでみたい！"
```

```{r}
#| error: true
Weather_2022/03/30 <- "最高気温22度"
```

**ただし**、`_`と`.`は使用可能であり、`.`より`_`を推奨

```{r}
Weather_2022_03_30 <- "最高気温22度"
Weather_2022_03_30
```

## オブジェクト名（3）

**原則3:** 予約語を避ける

* Rがデフォルトで提供する組込の関数やオブジェクトと重複する名前を自分で作成するオブジェクトに付けることは避ける（できない場合もある）。
   * **例)** `pi`（円周率）、`if`、`for`など

::::{.columns}
:::{.column width=49%}
**例1:** 指定は出来るが、非推奨

```{r}
pi # 円周率
```

```{r}
pi <- "3月14日はpie day!"
pi # もはや円周率ではない
```
:::

:::{.column width=2%}
:::

:::{.column width=49%}
**例2:** そもそも指定できない

```{r}
#| error: true
for <- "フォー！"
```
:::
::::

## オブジェクト名（4）

**原則4:** 短さと分かりやすさの両立

* オブジェクト名を付けるセンスはプログラマーのレベルが測れる指標の一つ

**例1:** 変数の中身を見るまでは、どのような内容が入っているか分からない

```{r}
#| eval: false
var2   <- c("female", "male", "male", "female") # 分かりにくい
gender <- c("female", "male", "male", "female") # 分かりやすい
```

<br/>

**例2:** 長すぎて今後、打つのが面倒くさい

```{r}
#| eval: false
mathematicsscore <- c(30, 91, 43, 77, 100) # 長い!!
MathScore        <- c(30, 91, 43, 77, 100) # 大文字キャメルケース
mathScore        <- c(30, 91, 43, 77, 100) # 小文字キャメルケース
math_score       <- c(30, 91, 43, 77, 100) # スネークケース
```

## 改行

* コードは1行が長すぎないように適宜改行すること。
   * 1行に何文字までするかはモニター・サイズと相談すること（昔は80文字という非公式的なルールがあった）。

**良い例:** 改行あり

```{r}
#| eval: false
fit1 <- glm(Voted ~ Female + Age + Education + Income + Region +
              Attitude1 + Attitude2 + Attitude3, 
            family = binomial("logit"), data = my_data)
```

**悪い例:** 改行なし

```{r}
#| eval: false
fit1 <- glm(Voted ~ Female + Age + Education + Income + Region + Attitude1 + Attitude2 + Attitude3, family = binomial("logit"), data = my_data)
```

![](Figs/programming/punchcard.png){width=65% fig-align="center"}

## スペースと字下げ（1）

* コードが長くなるほどスペースの字下げは重要
* 全ての演算子の前後には**半角**スペースを入れる。
   * `+`、`-`、`*`、`%%`、`&`、`|`、`<-`など
   * ただし、`^`は例外
   * 全角スペースは絶対に使わないこと
* 同じブロック（`()`、`{}`）内なら字下げも可読性の観点から重要
   * ただし、字下げはRStudioを手伝ってくれる。

**良い例:**

```{r}
#| eval: false
sum(my_vec2, na.rm = TRUE)
```

**悪い例:**

```{r}
#| eval: false
sum(my_vec2,na.rm=TRUE)
```

## スペースと字下げ（2）

以下のコードは全て同じであるが、可読性が桁違い（表形式データ作成の例）

**良い例:** 改行あり、字下げあり、スペースあり

```{r}
#| eval: false
data.frame(
  name     = c("Song",  "Yanai", "Wickham"),
  favorite = c("Ramen", "Cat",   "R"),
  gender   = c("Male",  "Male",  "Male")
)
```

**悪い例:** 改行あり、字下げなし、スペースあり

```{r}
#| eval: false
data.frame(
name = c("Song", "Yanai", "Hadley"),
favorite = c("Ramen", "Cat", "R"),
gender = c("Male", "Male", "Male")
)
```

**邪悪な例:** 改行なし（=字下げなし）、スペースなし

```{r}
#| eval: false
data.frame(name=c("Song","Yanai","Hadley"),favorite=c("Ramen","Cat","R"),fender=c("Male","Male","Male"))
```

# 本格的なプログラミングの世界へ {visibility="uncounted"}

## 本格的なプログラミングの世界へ

中級者以上を目指すなら以下のようなプログラミングの知識は必須であるものの、本講義では一部を除き、解説しない。

詳細は[教科書の第10章](https://www.jaysong.net/RBook/programming.html)を参照

* 反復
   * `for()`
   * `while()`
* 条件分岐
   * `if()`、`else if()`、`else()`
   * `ifelse()`（$\simeq$ `if_else()`）
      * 本講義ではかなり頻繁に使うため、第9回以降に解説する。
   * `switch()`

## プログラミングは簡単だから難しい

チューリング完全な言語の2条件

* **データの読み書き**
* **条件分岐**
* データの読み書きと条件分岐を組み合わせると**反復処理**が可能

<br/>

#### プログラミングが簡単な理由

データの読み書き、条件分岐、反復処理を覚えるだけで、パソコンで出来る**すべて**のことができる。

<br/>

#### プログラミングが難しい理由
データの読み書き、条件分岐、反復処理だけですべてを処理しなければならない。


## 例) Bubble Sortアルゴリズム {visibility="hidden"}

* 代入（`<-`）、条件分岐（`if()`）、反復（`for()`）だけでベクトルのソート

```{r}
#| code-line-numbers: "|2,6,7,8|5|3,4"
bubble_sort <- function(x){
  n <- length(x)
  for (i in 1 : (n - 1)) {
    for (j in 1 : (n - i)) {
      if (x[j] > x[j + 1]) {
        temp <- x[j]
        x[j] <- x[j + 1]
        x[j + 1] <- temp
      }
    }
  }
  return(x)
}
```

<br/>

```{r}
x <- c(4, 2, 6, 3, 1, 11, 5, 9)
bubble_sort(x)
```
