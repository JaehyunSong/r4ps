---
subtitle: "第8回 データ構造"
date: "2024/5/30"
format: revealjs
metadata-files: 
  - _slide.yml
---

# データ構造

## データ構造とは

* **データ構造 (data structure):** 一つ以上のベクトルの集合
   * ベクトルはRにおけるデータの最小単位
      * `"Cat"`や`5`も長さ1のベクトルであり、原子ベクトル（atomic vector）とも呼ばれ、中でもnumeric型の長さ1のベクトルはスカラー（scalar）とも呼ばれる。

:::{layout="[40,-2, 58]"}
![matrix型](Figs/datastructure/matrix1.png)

![data.frame型$\simeq$tibble型](Figs/datastructure/df.png)
:::

## データ構造の種類

本講義で使うデータ構造は主にベクトル（vector）とデータ・フレーム（data.frame）とその拡張版のティブル（tibble）のみであるため、行列（matrix）、配列（array）、リスト（array）の詳細な説明は割愛する。

* **ベクトル（vector）**
* 行列（matrix）
   * 配列（array）
   * 行列は層（layer）が1つのみの配列
* **データ・フレーム（data.frame）**
   * **ティブル（tibble）** $\leftarrow$ データ・フレームの拡張版であり、本講義で主に使用するデータ構造
* リスト（list）
   * 他にもRには数百、数千種類のデータ構造があるが、その中身は実質リスト構造である場合が多い。

# ベクトル

## ベクトル（vector）

**同じデータ型が一つ以上**格納されているオブジェクト

* Rにおけるデータの最小単位
   * Rには数百、数千種類のデータ構造が存在するが、その最小単位はベクトルである。
* 長さは1以上

```{r}
my_vec1 <- "R is fun!"      # 長さ1のcharacter型ベクトル
my_vec2 <- c(1, 3, 5, 6, 7) # 長さ5のnumeric型ベクトル
```

* 一つのベクトル内の全ての要素は同じデータ型
   * 優先順位はcharacter型 > numeric型 > logical型

```{r}
# 長さ6のベクトルであるが、2つのデータ型が混在しているため、character型が優先
my_vec3 <- c("A", "B", "C", 1, 2, 3)
my_vec3

# 長さ4のベクトルであるが、2つのデータ型が混在しているため、numeric型が優先される 
# 参考1) TRUEは1に、FALSEは0に変換される。
# 参考2) logical -> characterの場合、TRUEは"TRUE"に、FALSEは"FALSE"に
my_vec4 <- c(10, 20, TRUE, FALSE)
my_vec4
```

## ベクトルの操作（復習）

データ型、長さなど

* `class(オブジェクト名)`: データ型
* `length(オブジェクト名)`: ベクトルの長さ（要素数）
* `nchar(オブジェクト名)`: Character型の場合、各要素の文字数

要素の抽出

* `オブジェクト名[n]`: `n`番目の要素を抽出
* `オブジェクト名[n:k]`: `n`番目から`k`番目の要素を抽出
* `オブジェクト名[c(i, j, k, ...)]`: `i`、`j`、`k`、...番目の要素を抽出
* `オブジェクト名[c(TRUE, FALSE, TRUE, ...)]`: `TRUE`に対応する位置の要素を抽出

## Numeric型ベクトルの演算 (復習)

* **ケース1:** 同じ長さのベクトル同士
   * 同じ位置の要素同士の演算
* **ケース2:** 異なる長さのベクトル同士
   * 短い方のベクトルがリサイクルされる

# 行列（配列）

## 行列 (matrix)

* numeric型、またはcomplex型の縦ベクトルを横に並べたデータ構造
* 3 $\times$ 4の行列の例

```{r}
my_mat1 <- matrix(1:12, nrow = 3)
my_mat1
```

* 長さ3のnumeric型**縦**ベクトルが4つ並んでいる模様
* 長さ4のnumeric型**横**ベクトルが3つ積まれているとも読めるが、データ分析では一般的に縦ベクトルの集合として行列を捉える。

## 行列の作成

* `matrix()`関数を使用
   * 第1引数としてnumericまたはcomplex型ベクトル、`nrow`引数で行列の行数を指定
   * 要素が入る順番に注意

:::: {.columns}

::: {.column width="65%"}

$$
\begin{bmatrix}
5 & 2 & 9 & 6 \\
5 & 4 & -8 & 2 \\
-3 & 3 & 0 & 7
\end{bmatrix}
$$

```{r}
my_mat2 <- matrix(c(5, 5, -3, 2, 4, 3, 
                    9, -8, 0, 6, 2, 7), 
                  nrow = 3)
my_mat2
```
:::

::: {.column width="5%"}
:::

::: {.column width="30%"}
![](Figs/datastructure/matrix2.png)
:::

::::

## 行列の操作

本講義では使用しないため、説明は割愛する。

```{r}
class(my_mat1) # my_mat1のデータ構造
dim(my_mat1)   # 行列の行数と列数
nrow(my_mat1)  # 行列の行数
ncol(my_mat1)  # 行列の列数
my_mat1[1, ]   # my_matの1「行」目を抽出
my_mat1[, 3]   # my_matの3「列」目を抽出
my_mat1[2, 4]  # my_matの2「行」、4「列」目を抽出
```

## 行列の演算

本講義では使用しないため、説明は割愛する。

* 線形代数を勉強する人には便利な演算子

|演算子/関数|説明|
|:---|:---|
|`+`|行列の足し算|
|`-`|行列の引き算|
|`%*%`|行列の掛け算|
|`/`|行列の割り算|
|`*`|行列のアダマール積 (Hadamard product)|
|`t(オブジェクト名)`|行列の転置|
|`qr(オブジェクト名)$rank`|行列の階数|
|`solve(オブジェクト名)`|逆行列|
|`eigen(オブジェクト名)`|行列の固有値|
|`diag(オブジェクト名)`|行列の対角成分|

## 配列 (array)

行列を重ねたもの

* 行列は層 (layer) が1つのみの配列
* 3次元のデータ構造であり、要素抽出の際、`[x, y, z]`で指定する必要がある。
   * 配列から行列を抽出したら、あとは行列の同じ操作
   * 3番目の`z`が配列の層 (layer)を意味する
* 各層の行列の大きさは全て同じ

![](Figs/datastructure/array.png){fig-align="center"}

# データフレーム

## データフレーム: 紹介

* 表形式データ
* 縦ベクトルを横に並べたもの
* 一つ一つの列はベクトルであるため、一つの列は同じデータ型
   * 全列が同じデータ型である必要はない。
* 行列との違い
   * 列ごとに異なるデータ型が使用可能
   * 列に名前が付いている（変数名）。
* 詳しい操作方法は次回以降（データ・ハンドリング）の講義で解説

![](Figs/datastructure/df.png){fig-align="center"}

## データ・フレームの作成 (1)

自分で作成する場合

* `data.frame()`、または`tibble()`関数を使用
   * `tibble()`関数を使う前に{tidyverse}パッケージを読み込む

```{r}
library(tidyverse)
```

## データ・フレームの作成 (2)

データ・フレームを直接作成する方法

```{r}
my_df1 <- tibble(Name       = c("Kansai", "Kangaku", "Doshisha", "Ritsumeikan"),
                 Foundation = c(1886, 1889, 1875, 1900),
                 Students   = c(27736, 23671, 25974, 32467))

my_df1
```

## データ・フレームの作成 (3)

ベクトルから作成する方法

```{r}
Name <- c("Tokyo", "Nagoya", "Osaka", "Fukuoka")
Food <- c("Monja", "Tebasaki", "Takoyaki", "Ramen")
Pop  <- c(1396, 755, 882, 511)
Area <- c(2194, 5173, 1899, 4987)

my_df2 <- tibble(Name, Pop, Area, Food)

my_df2
```

## データ・フレームの作成 (4)

表形式ファイルの読み込み

* `read_csv()`を使用する前に{tidyverse}を読み込んでおく（今回は読み込み済み）。
   * サンプルデータはLMSから入手可能
* プロジェクトフォルダーの`Data`フォルダー内の`BuildingData.csv`を読み込み、`my_df3`という名のオブジェクトとして格納
   * `data`フォルダーなら`data/BuildingData.csv`、プロジェクトフォルダーに直接入れたのであれば`BuildingData.csv`のみ

```{r}
my_df3 <- read_csv("Data/BuildingData.csv")

my_df3
```

## データ・フレームの確認 (1)

* `class()`：データ構造の確認
   * `"data.frame"`以外にもいくつか出るが、`"data.frame"`が含まれていればOK
   * `"data.frame"`に加え、`"tbl_df"`、`"tbl"`が含まれる場合、tibble（データフレームの上位互換）であることを意味する。

```{r}
class(my_df3) # my_df2のデータ構造
```

* `is.data.frame()`：データ・フレームか否かを判定

```{r}
is.data.frame(my_df3)
```

* `nrow()` / `ncol()`：データ・フレームの行数 / 列数

```{r}
nrow(my_df1) # my_df1の行数
ncol(my_df2) # my_df2の列数
```

## データフレームの確認 (2)

* `head()`：**最初**の6行のみ出力
* `tail()`：**最後**の6行を出力
   * `n = 5`を追加すると、最初 (最後) の5行を出力（任意の数字）
* `names()`：変数名のみ出力

::: {.panel-tabset}

### `head()`

:::: {.columns}

::: {.column width="47.5%"}
```{r}
head(my_df3)
```
:::

::: {.column width="5%"}
:::

::: {.column width="47.5%"}
```{r}
head(my_df3, n = 10)
```
:::

::::

### `tail()`

:::: {.columns}

::: {.column width="47.5%"}
```{r}
tail(my_df3)
```
:::

::: {.column width="5%"}
:::

::: {.column width="47.5%"}
```{r}
tail(my_df3, n = 3)
```
:::

::::

### `names()`

```{r}
names(my_df3)
```

:::

## データ・フレーム: 行の抽出

:::: {.columns}

::: {.column width="47.5%"}
```{r}
my_df3[27, ]
class(my_df3[27, ])
```
:::

::: {.column width="5%"}
:::

::: {.column width="47.5%"}
```{r}
my_df3[c(13, 27, 40), ]
class(my_df3[c(13, 27, 40), ])
```
:::

::::

## データ・フレーム: 列の抽出 (1)

:::: {.columns}

::: {.column width="47.5%"}
```{r}
my_df3[, 2]
class(my_df3[, 2])
```
:::

::: {.column width="5%"}
:::

::: {.column width="47.5%"}
```{r}
my_df3[, c(2, 4, 5)]
class(my_df3[, c(2, 4, 5)])
```
:::

::::

## データ・フレーム: 列の抽出 (1)

```{r}
my_df3$Pref
```

返り値はデータ・フレームでなく、ベクトル

* データ構造がベクトルの場合、`class()`はデータ型が出力される。

```{r}
class(my_df3$Pref)
```

## データ・フレーム: 抽出方法の比較

抽出方法によって返り値のデータ構造が異なる。

* `[]`を用いた抽出は返り値がデータ・フレーム
* `$`を用いた抽出は返り値がベクトル

|コード|意味|返り値|備考|
|:---|:---|:---|:---|
|`データ・フレーム名[i, ]`|`i`番目の行を抽出|データ・フレーム|`i`は任意のベクトル|
|`データ・フレーム名[, i]`|`i`番目の列を抽出|データ・フレーム|`i`は任意のベクトル|
|`データ・フレーム名$列名`|当該列を抽出|**ベクトル**||

# リスト

## リスト

* あらゆるデータ構造が格納できるデータ構造
   * Rに存在する多くのオブジェクトはリストであるため、Rでデータを自由自在に操るためにはリストの知識が必須
   * ただし、本講義ではリストは使わない。

::: {.panel-tabset}

### 作成

```{r}
my_list <- list(Vector1 = my_vec1,
                Vector2 = my_vec4,
                Matrix  = my_mat1)
```

### 中身

```{r}
my_list
```

### 抽出 (1)

`リスト名[[i]]`の場合、リストの`i`番目要素が抽出される。

```{r}
my_list[[2]]
```

### 抽出 (2)

要素に名前がついてある場合、`リスト名$要素名`でも抽出可能

```{r}
my_list$Matrix
```

:::