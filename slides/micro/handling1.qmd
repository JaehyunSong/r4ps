---
subtitle: "9/ データ・ハンドリング（1）"
format: revealjs
metadata-files: 
  - _slide.yml
---

## 授業開始前に

```{r}
#| include: false
pacman::p_load(tidyverse)
```

すぐに実習できるように準備しておきましょう。

1. JDCat分析ツールを起動しておいてください。
2. 本日授業用のプロジェクトを開いてください。
   * RStudioの右上に「Project: (none)」と表示されたら$\times$
3. LMSから実習用データをダウンロードしておいてください。
4. ダウンロードしてデータをプロジェクト・フォルダーにアップロードしてください。
5. 実習用コードを入力する空のスクリプトファイル、またはQuartoファイルを開き、以下のコードを入力&実行してください。

```{r}
#| eval: false
library(tidyverse)

# countries.csvのアップロード先に応じて、パスを適宜修正すること
df <- read_csv("Data/countries.csv")
```

* トラブルが生じた場合、速やかにTAを呼んでください。
* 時間に余裕があれば、スライド内のコードも書いておきましょう。

# Tidyverseの世界とパイプ演算子

## Tidyverseの世界

![](https://www.tidyverse.org/images/tidyverse-default.png){width=40% fig-align="center"}

データサイエンスのために考案された、強い信念と思想に基づいたRパッケージの集合

* {tidyverse}をインストールすることで導入可能
* Tidyverseに属するパッケージは思想、文法およびデータ構造を共有
  * {dplyr}、{tidyr}、{readr}、{ggplot2}など
* オブジェクトを**パイプ演算子**（`|>` or `%>%`）で繋ぐ

Rのコードは`library(tidyverse)`で始めよう!

## パイプ演算子

Tidyverseにおいてオブジェクトは`|>`で繋がっている。

* 既存の書き方：**書き方と読み方が逆**
  * 一般的なプログラミング言語共通
  * 書き方：`print(sum(X))`（`print`、`sum`、`X`の順で書く）
  * 読み方1：`X`を`sum()`し、`print()`する（コードの順番と逆）
  * 読み方2：`print()`する内容は`sum()`で、`sum()`は`X`に対して行う（直感的でない読み方）
* Tidyverseな書き方：**書き方と読み方が（おおむね）一致**
  * 今どきのRの書き方
  * 書き方：`X |> sum() |> print()`
  * 読み方：`X`を`sum()`し、`print()`する

## パイプ演算子の仕組み

* `|>`の左側を右側の最初の引数として渡すだけ
* `X |> 関数(Y)`は`関数(X, Y)`と同じ
   * `X |> sum(na.rm = TRUE)`は`sum(X, na.rm = TRUE)`と同じ
* ショートカットキーを使えば簡単に入力可能
   * macOS：Command（⌘） + Shift + m
   * Windows/Linux：Control（Ctrl） + Shift + m
* 二番目以降の引数として渡すことも可能（適宜、解説）

:::: {.columns}

::: {.column width="49%"}
#### 既存の書き方

```{r}
X <- c(2, 3, 5, NA, 11)
print(sum(X, na.rm = TRUE))
```
:::

::: {.column width="2%"}

:::

::: {.column width="49%"}
#### Tidyverseな書き方

```{r}
X <- c(2, 3, 5, NA, 11)
X |> sum(na.rm = TRUE) |> print()
```
:::

::::

## 様々な書き方

:::{.panel-tabset}
## 書き方1

::::{.columns}
:::{.column width="40%"}
```{r}
#| eval: false
結果1 <- 関数1(データ)
結果2 <- 関数2(結果1)
結果  <- 関数3(結果2)
```
:::

:::{.column width="60%"}
![](Figs/handling1/pipe1.png){fig-align="center" width=60%}
:::
::::

## 書き方2

::::{.columns}
:::{.column width="40%"}
```{r}
#| eval: false
結果 <- 関数3(関数2(関数1(データ)))
```
:::

:::{.column width="60%"}
![](Figs/handling1/pipe2.png){fig-align="center"}
:::
::::

## 書き方3

::::{.columns}
:::{.column width="30%"}
```{r}
#| eval: false
結果 <- データ |> 
  関数1() |> 
  関数2() |> 
  関数3()
```
:::

:::{.column width="70%"}
![](Figs/handling1/pipe3.png){fig-align="center"}
:::
::::
:::

## 参考）`%>%`：もう一つのパイプ演算子

R内蔵演算子としてパイプ演算子（`|>`）が追加

* 2021年5月リリースされたR 4.1からR内蔵のパイプ演算子`|>`が登場
* それまでは{magrittr}パッケージが提供する`%>%`を使用
   * {magrittr}は{tidyverse}を読み込むと自動的に読み込まれる。
* 使い方はほぼ同じ
   * ただし、演算子の左側のオブジェクトを右側の**第一引数**として渡す場合のみ
   * 第一引数以外の引数として渡す場合は使い方が異なる。
* インターネット、教科書などでは`%>%`を使用するケースがまだ多いが、今後の主流は`|>`になると予想されるため、本講義では`|>`を使用する。
   * むろん、現段階では`%>%`を使っても良いし、`%>%`を使ったコードを`|>`に置換して使っても**ほぼ**問題にならない。

## 参考）`%>%`と`|>`の比較

#### 渡す先が第一引数の場合

* R内蔵のパイプ（native pipe; `|>`）、{magrittr}のパイプ（`%>%`）の使い方は同じ

```{r}
#| eval: false
# {magrittr}のパイプ演算子
X %>% sum(na.rm = TRUE) %>% print()
# R内蔵のパイプ演算子
X |> sum(na.rm = TRUE) |> print()
```

#### 渡す先が第一引数でない場合

* 実引数として渡す箇所に`.` (tidyverse)、`_` (native pipe)を入力

```{r}
#| eval: false
# {magrittr}のパイプ演算子
my_data %>%
  lm(y ~ x1 + x2 + x3, data = .)
# R内蔵のパイプ演算子
my_data |>
  lm(y ~ x1 + x2 + x3, data = _)
```

# {dplyr}: 列の抽出

## {dplyr}とは

![](https://www.tidyverse.org/blog/2020/06/dplyr-1-0-0/dplyr.png){width=20% fig-align="center"}

* 表形式データ (データフレームやtibble)を操作するパッケージ
* 第8回の講義で解説した行・列の抽出も簡単に可能
* {tidyverse}を読み込む際に自動的に読み込まれる
   * {tidyverse}はパッケージを集めたパッケージであり、{dplyr}もその一部

```{r}
#| eval: false
library(tidyverse)
```

## 実習用データ

`countries.csv`: 186カ国の社会経済・政治体制のデータ

```{r}
#| message: false
# Dataフォルダー内のcountries.csvを読み込み、dfという名のオブジェクトとして作業環境に格納
df <- read_csv("Data/countries.csv")
df
```

## 実習用データの確認

186行、18列のデータ（= 186カ国、18変数）

```{r}
dim(df)
```

変数の一覧

```{r}
names(df)
```

## 各変数について

詳細は[教科書第18.2章](https://www.jaysong.net/RBook/visualization2.html#visual2-data)を参照

|変数名|説明||変数名|説明|
|---|---|---|---|---|
|`Country`|国名||`OECD`|OECD加盟有無|
|`Population`|人口||`HDI_2018`|人間開発指数 (2018年)|
|`Area`|面積( $\text{km}^2$ )||`Polity_Score`|政治体制のスコア|
|`GDP`|国内総生産（ドル）||`Polity_Type`|政治体制|
|`PPP`|購買力平価国内総生産||`FH_PR`|政治的自由|
|`GDP_per_capita`|一人当たりGDP||`FH_CL`|市民的自由|
|`PPP_per_capita`|一人当たりPPP||`FH_Total`|`FH_PR` + `FH_CL`|
|`G7`|G7加盟有無||`FH_Status`|自由の状態|
|`G20`|G20加盟有無||`Continent`|大陸|

## 列の選択（抽出）: 書き方

`select()`関数を使用

:::: {.columns}

::: {.column width="45%"}
#### パイプを使わない書き方

```{r}
#| eval: false
select(データ, 変数名1, 変数名2, ...)
```
:::

::: {.column width="10%"}

:::

::: {.column width="45%"}
#### パイプを使う書き方

```{r}
#| eval: false
データ |>
  select(変数名1, 変数名2, ...)
```
:::

::::

::: {.callout-important icon=false}
## 注意: `select()`関数は複数ある!

`select()`関数は{dplyr}だけでなく、{MASS}からも提供されるが、別の関数である。

* {MASS}もデータ分析において頻繁に使われるパッケージであるため、`select()`だけだと、どのパッケージの`select()`か分からなくなる場合がある。
* エラーが生じる場合は、`dplyr::select()`など、パッケージ名を指定すること
:::

<!--- --->

## 列の選択（抽出）: 例

`df`から`Country`、`Population`、`HDI_2018`列を抽出し、最初の5行のみ出力

```{r}
#| code-line-numbers: "2"
df |>                                      # dfから
  select(Country, Population, HDI_2018) |> # Country, Population, HDI_2018のみ抽出して
  head(n = 5)                               # 最初の5行を出力する
```

この時点では抽出・出力されただけ。抽出した結果を`df2`という名で作業環境内に格納するためには

```{r}
#| eval: false
df2 <- df |>
  select(Country, Population, HDI_2018)
```

::: {.callout-important icon=false}
## 課題では格納が必要な場合もある

課題の問題には「出力せよ」だけでなく、「格納した上で出力せよ」といった形式もある。加工したデータを引き続き使うためには格納が必須であるため、問題文を注意深く読むこと。
:::

<!--- --->

## 列の選択と変数名の変更

変数名の変更と抽出を同時に行うことも可能

* `新しい変数名 = 既存の変数名`

**例)** `HDI_2018`の変数名を`HDI`に変更

```{r}
df |>
  select(Country, Population, HDI = HDI_2018)
```

<!--- --->

## 抽出せず、変数名のみ変更

`rename()`関数を使用

```{r}
#| eval: false
データ |>
  rename(新しい変数名 = 既存の変数名)
```

**例)** `Population`を`Jinko`に、`Area`を`Menseki`に変更

```{r}
#| code-line-numbers: "2"
df |>
  rename(Jinko = Population, Menseki = Area)
```

<!--- --->

## 列の除外

変数名の前に`!` (推奨)、または`-`を付ける

* 2つ以上の変数を除外する場合、変数名を`c()`でまとめる。

**例)** `df`から`GDP_per_capita`と`PPP_per_capita`を除外

```{r}
df |>
  select(!c(GDP_per_capita, PPP_per_capita))
```

<!--- --->

## 隣接する列の同時選択

`:`を使用

* `Country`から`PPP`までの列: `Country:PPP`
* `Country:PPP`は`Country, Population, Area, GDP, PPP`と同じ意味

**例)** `df`の`Country`〜`PPP`, `HDI_2018`列を抽出

```{r}
df |>
  select(Country:PPP, HDI_2018)
```

<!--- --->

## 高度な変数選択

* 特定の文字列で始まる列を選択: `starts_with()`
   * 例)FHで始まる列の選択: `starts_with("FH")`
* 特定の文字列で終わる列を選択: `ends_with()`
* 特定の文字列を含む列を選択: `contains()`

**例)** `df`から`Country`, `"FH"`で始まる列を抽出

```{r}
df |>
  select(Country, starts_with("FH"))
```

* 応用) `!starts_with("FH")`: `"FH"`で始まる列を除外

<!--- --->

## 列の順番変更: `select()`使用

抽出後のデータフレームにおける変数は`select()`内で指定された順番に

**例)** `G7`から`OECD`列を`Country`と`Population`の間へ移動

```{r}
#| code-line-numbers: "2"
df |>
  select(Country, G7:OECD,
         Population:PPP_per_capita, HDI_2018:Continent)
```

<!--- --->

## 列の順番変更: `relocate()`使用

`relocate()`の使い方

* `.after = XXX`: `XXX`列の後ろへ移動 / `.before = YYY`: `YYY`列の前へ移動

```{r}
#| eval: false
データ |>
  relocate(移動したい変数名, .after = 変更先)
```

**例)** `G7`から`OECD`列を`Country`の後ろへ移動

```{r}
df |>
  relocate(G7:OECD, .after = Country) # .before = PopulationもOK
```

<!--- --->

# {dplyr}: 行の抽出

<!--- --->

## 行の抽出: 書き方

`filter()`関数を使用

パイプを使わない書き方

```{r}
#| eval: false
filter(データ, 条件1, 条件2, ...)
```

パイプを使う書き方

```{r}
#| eval: false
データ |>
  filter(条件1, 条件2, ...)
```

<!--- --->

## 行の抽出: 例

**例)** `df`から`Continent`が`"Europe"`の行を抽出し、`Country`〜`PPP`, `HDI_2018`列を抽出し、`HDI_2018`は`HDI`に変更

* `filter()`と`select()`の組み合わせ
* 以下の例の場合、`filter()`と`select()`の順番を逆にすることは不可
   * `select()`後、`Continent`変数がなくなるため

```{r}
#| code-line-numbers: "2"
df |>
  filter(Continent == "Oceania") |>
  select(Country:PPP, HDI = HDI_2018)
```

<!--- --->

## 行の抽出: 2つ以上の条件（AND）

2つ以上の条件を**同時に満たす**行を抽出

* `,`で条件式を追加するだけ (`&`もOK; むしろ`&`を推奨)

**例)** `df`から「`Continent`が`"Asia"`（条件1）」、「`HDI_2018`が0.8以上（条件2）」の行を抽出し、`Country`と`HDI_2018`列を抽出

* 条件1 AND 条件2 $\Rightarrow$ 条件1 & 条件3

```{r}
df |>
  filter(Continent == "Asia" & HDI_2018 >= 0.8) |>
  select(Country, HDI_2018)
```

<!--- --->

## 行の抽出: 2つ以上の条件（OR）

2つ以上の条件を**片方か両方に満たす**行を抽出

* `|`で条件式を追加するだけ

**例)** `df`から「`Continent`が`"Asia"`（条件1）か`"Oceania"`（条件2）」であり、かつ「`HDI_2018`が0.9以上（条件3）」の行を抽出し、`Country`と`HDI_2018`、`Continent`列を抽出

* (条件1 OR 条件2) AND 条件3 $\Rightarrow$ (条件1 | 条件2) & 条件3

```{r}
df |>
  filter((Continent == "Asia" | Continent == "Oceania") & HDI_2018 >= 0.9) |>
  select(Country, HDI_2018, Continent)
```

<!--- --->

## `%in%`演算子

`%in%`: `|`の代わりに使用可能な便利な演算子

**例)** `Continent`の値が`c("Asia", "Oceainia")`の要素に含まれている場合

```{r}
df |>
  filter(Continent %in% c("Asia", "Oceania") & HDI_2018 >= 0.9) |>
  select(Country, HDI_2018, Continent)
```

## 欠損値が含まれた行の扱い

`df`の`PPP`が欠損している行を抽出し、`Country`から`PPP`列まで出力

* `変数名 == NA`を条件にしてはいけない

```{r}
df |>
  filter(PPP == NA) |>
  select(Country:PPP)
```

## 欠損値が含まれた行の扱い

`df`の`PPP`が欠損している行を抽出し、`Country`から`PPP`列まで出力

* 正解: `is.na(変数名)`

```{r}
df |>
  filter(is.na(PPP)) |>
  select(Country:PPP)
```

## 欠損値が含まれた行の除外

`df`の`PPP`が欠損している行を**除外**し、`Country`から`PPP`列まで出力

* 否定を意味する`!`を使用する

```{r}
df |>
  filter(!is.na(PPP)) |>
  select(Country:PPP)
```

## もう一つの方法

`drop_na()`関数を利用

* `()`内で指定した変数が欠損している行をすべて除外（複数指定可）

```{r}
df |>
  drop_na(PPP, Polity_Score) |> # PPPとPolity_Scoreどちらか欠損した行を除外
  select(Country:PPP, Polity_Score)
```

# {dplyr}: 行のソート

## 行のソート: 書き方

`arrange()`関数を使用

パイプを使わない書き方

```{r}
#| eval: false
arrange(データ, 変数名1, 変数名2, ...)
```

パイプを使う書き方

```{r}
#| eval: false
データ |> arrange(変数名1, 変数名2, ...)
```

基本的には昇順 (値が小さい行が先にくる)

* 降順にする場合は`desc(変数名)`
* `変数名1`を基準にソートし、同点の場合は`変数名2`を基準に

<!--- --->

## 行のソート: 例

**例)** `df`から`Continent`の値が`"Africa"`の行のみを抽出し、`Polity_Score`が高い行を上位にする。そして、`Country`と`PPP_per_capita`、`Polity_Score`列のみ残す。

* Polity Scoreが高い (低い) = より民主主義 (権威主義)に近い

```{r}
#| code-line-numbers: "3"
df |>
  filter(Continent == "Africa") |>
  arrange(desc(Polity_Score)) |>
  select(Country, PPP_per_capita, Polity_Score)
```

<!--- --->

## 行のソート: 応用

* `df`からアフリカのみを抽出し、`Polity_Score`が低い行を上位に
* `Polity_Score`が同点の場合、`PPP_per_capita`が高い行を上位に
* `Country`と`Polity_Score`, `PPP_per_capita`列のみ残す
* `Polity_Score`は`Polity`に、`PPP_per_capita`は`PPP`と名前を変更

```{r}
#| code-line-numbers: "3"
df |>
  filter(Continent == "Africa") |>
  arrange(Polity_Score, desc(PPP_per_capita)) |>
  select(Country, Polity = Polity_Score, PPP = PPP_per_capita)
```
