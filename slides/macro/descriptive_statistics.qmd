---
subtitle: "第4回 記述統計"
date: "2023/10/12"
format: revealjs
metadata-files: 
  - _slide.yml
---

## 授業前に確認してください。

* JDCat分析ツール（クラウド版のRStudio）のFile > New File > Quarto Document... を選択
   1. 「New Quarto Document」というウィンドウが表示される。
      * $\Rightarrow$ 問題なし
   2. エラーのウィンドウが表示される。
      * $\Rightarrow$ もう一度初期設定を行ってください。
      * <https://www.jaysong.net/r4ps/intro/install.html>
      * 既存のサーバーは削除してください。

## 本日の内容

* 記述統計とは何か。
* どの変数にどの記述統計量を求めるべきか。
* 記述統計量をどう報告するか。
* Rの復習
   * 前期履修者でも数ヶ月はRを触っていないはずなので、ウォーミングアップ
   * ゼロベースの解説では**ない**（Rの導入やデータの読み込みなどは解説しない）。

# 変数の種類と記述統計

```{r}
#| include: false
pacman::p_load(tidyverse, gt, summarytools)
options(width = 100)
df <- read_csv("Data/descstat_data.csv")
```

## 記述統計

**記述統計量**（descriptive statistics）

* ある変数が持つ情報を要約した数値
* データ分析を用いる論文、レポートにはデータ分析の結果を紹介する前に**必ず**分析に用いる変数の記述統計量が必要
* 記述統計量の種類
   * 各変数を代表する値：平均値、中央値、最頻値
   * 値の散らばり具合：標準偏差、分散、範囲（最大値 - 最小値）、四分位範囲など

## 記述統計量の必要性

通常、データ分析で用いるケースは数百〜数万であるため、一つずつ列挙することはほぼ不可能であり、記述統計量を用いた方が効率的

* **例1)** あるクラス（3人）の数学成績が82点、45点、69点なら
   * 「うちのクラスの数学成績は82点、45点、69点です！」で良い
* **例2)** あるクラス（30人）の数学成績が82点、45点、69点、94点、...、63点なら
   * 「うちのクラスの数学成績は82点、45点、69点、94点、...、63点です！」は長い
   * 「うちのクラスの数学成績は平均して75点で、標準偏差は8点です。」

## 実習の準備

パッケージとデータの読み込み（データはLMSから入手可能）

```{r}
library(tidyverse) # {tidyverse}パッケージを読み込む
df <- read_csv("Data/descstat_data.csv")　# Dataフォルダー内のdescstat_dataを読み込み、dfと名付ける

print(df) # dfの最初の10行を確認
```

## データの確認

データの大きさ（行数と列数）の確認

```{r}
dim(df)
```

変数名の確認

```{r}
names(df)
```

## データの加工（変数の抽出）

分析に使用する変数だけを残し、新しいオブジェクトとして格納

* `select()`関数で列（=変数）抽出と変数名変更を同時に行う。

:::{.panel-tabset}
### コード

```{r}
df2 <- df |>
  select(ID           = USER_ID, # 回答者ID
         Gender       = gender,  # 性別
         Age          = age,     # 年齢
         Education    = Q61,     # 最終学歴（99は欠損値を意味する）
         Voted        = Q15,     # 投票参加 (2016参院選)
         VotedParty   = Q15S2,   # 投票先 (2016参院選)
         T_Jimin      = Q5_7,    # 自民に対する感情温度
         T_Minshin    = Q5_11)   # 民進に対する感情温度
```

### 結果

```{r}
df2 # print(df2)もOK
```

:::

# 連続変数の記述統計

## 連続変数（continuous variable）

間隔尺度、または比率尺度で測定された変数

* 量的変数の例: 年齢 (`Age`)、感情温度 (`T_Jimin`と`T_Minshin`)
   * 変数の尺度についてはミクロ政治データ分析実習の[第6回](https://www.jaysong.net/micro-book/materials/data_collection.html)を参照
* 量的変数の記述統計量（太字は掲載がほぼ必須の記述統計量）
   * **平均値** (`mean()`)
   * 中央値 (`median()`)
   * **標準偏差** (`sd()`)
   * 分散 (`var()`)
   * **最小値** (`min()`)
   * **最大値** (`max()`)
   * 欠損値を除く有効ケース数 (Observation; Obs)
      * 一部の変数に欠損値が含まれている場合は必須
      * ただし、分析を行う場合、予め欠損値を含む行を削除 or 補完する場合が多い
   * その他

## 記述統計の計算: Base Rの場合

```{r}
mean(df2$Age)        # Ageの平均値
median(df2$Age)      # Ageの中央値
sd(df2$Age)          # Ageの標準偏差
min(df2$Age)         # Ageの最小値
max(df2$Age)         # Ageの最大値
sum(!is.na(df2$Age)) # Ageの有効ケース数
```

## 記述統計の計算: {dplyr}を利用する

`summarise()`関数を使用

```{r}
df2 |>
  summarise(Mean   = mean(Age),         # Ageの平均値
            Median = median(Age),       # Ageの中央値
            SD     = sd(Age),           # Ageの標準偏差
            Min    = min(Age),          # Ageの最小値
            Max    = max(Age),          # Ageの最大値
            Obs    = sum(!is.na(Age)))  # Ageの有効ケース数
```

## 一つの表としてまとめる

論文、レポートに記述統計を掲載する際は一つの表としてまとめること

```{r}
#| echo: false
df2 |>
  summarise(across(c(Age, Jimin = T_Jimin, Minshin = T_Minshin),
                   .fns = list("Mean" = mean,
                               "SD"   = sd,
                               "Min"  = min,
                               "Max"  = max))) |>
  pivot_longer(cols = everything(),
               names_to = "x",
               values_to = "y") |>
  separate(col  = "x", 
           into = c("Variable", "Stat"),
           sep  = "_") |>
  pivot_wider(names_from  = "Stat",
              values_from = "y") |>
  mutate(Variable = c("年齢", "感情温度: 自由民主党", 
                      "感情温度: 民進党")) |>
  gt() |>
  cols_label("Variable" = "", "Mean" = "平均値", "SD" = "標準偏差",
             "Min" = "最小値", "Max" = "最大値") |>
  fmt_number(columns = 2:3, decimals = 3) |> 
  tab_options(table.font.size = 32)
```

<!-- -->

## {summarytools}の利用（1）

* {summarytools}の`descr()`関数
   * `descr()`内には記述統計を確認するdata.frame / tibbleのオブジェクト名
   * **数値型変数のみ**記述統計量が出力される。
      * 文字型変数（character型、factor型）の場合、予めダミー変数に変換しておく（後述）

:::{.panel-tabset}
### コード

```{r}
#| eval: false
# インストールされていない場合はRコンソール上にinstall.pacakges("summarytools")
library(summarytools)
df2 |>
  select(-ID) |> # 回答者IDの記述統計量は不要なので除外
  descr()
```

### 結果

```{r}
#| echo: false
df2 |>
  select(-ID) |>
  descr()
```
:::

<!-- -->

## {summarytools}の利用（2）

* 主要統計量のみ（`stats = ...`）、行と列の交換（`transpose = TRUE`）、変数の順番は固定（`sort = "p"`）
   * 平均値（`mean`）、標準偏差（`sd`）、最小値（`min`）、最大値（`max`）、有効ケース数（`n.valid`）

```{r}
#| code-line-numbers: "4-5"
df2 |>
  select(-ID) |>
  # 平均値、標準偏差、最小値、最大値、有効ケース数
  descr(stats = c("mean", "sd", "min", "max", "n.valid"),
        transpose = TRUE, sort = "p")
```

## 欠損値の扱いについて

最終学歴（`Education`）は1〜4で測定されているものの、最大値が99（超高学歴の人ではない）

* ここでの99は欠損値（missing value）であり、必ず欠損値に変えておく必要がある（そうでないと分析結果がとんでもないものになってしまう）。
   * `Education`の値が`99`なら`NA`に変更し、それ以外の場合は元の値とする。
* 事前に欠損値処理されているデータもあれば、そうでないデータもある。**データを入手した場合は必ずコードブックに目を通しておく**こと！

```{r}
df2 <- df2 |> 
  mutate(Education = if_else(Education == 99, NA, Education))

df2
```

## 欠損値処理後の記述統計

```{r}
#| code-line-numbers: "4-5"
df2 |>
  select(-ID) |>
  # 平均値、標準偏差、最小値、最大値、有効ケース数
  descr(stats = c("mean", "sd", "min", "max", "n.valid"),
        transpose = TRUE, sort = "p")
```

# カテゴリ変数の記述統計

## カテゴリ変数（categorical variable）

カテゴリ変数：名目尺度で測定された変数（=名目変数）

* カテゴリ変数の例: 性別 (`Gender`)、投票参加 (`Voted`)、投票先 (`VotedParty`)
   * 教育水準（`Education`）のような**順序変数**は、連続変数としてもカテゴリ変数としても扱うことが可能
* 名目尺度は足し算、掛け算などができないため、平均値や標準偏差のような概念が存在しない。

### カテゴリ変数の可視化

* **方法1:** 度数分布表を作成する
   * 事前にfactor化する
* **方法2:** ダミー変数に変換し、量的変数と同じ扱い
   * 記述統計の表を作成する場合は、ダミー変換後、量的変数同様に扱う

## 度数分布表の作成

`Voted`（投票有無）変数の度数分布表

* 値 (1, 2, 3, ...)の意味は質問票、またはコードブックを参照
* カテゴリ変数が複数ある場合、一つ一つの変数に対し、度数分布表を作成する必要がある。
   * $\Rightarrow$ できれば、連続変数の記述統計表と一つにまとめたい。

::::{.columns}
:::{.column width=60%}
```{r}
table(df2$Voted) # 度数
prop.table(table(df2$Voted)) # 割合
prop.table(table(df2$Voted)) * 100 # パーセントで出力
```
:::

:::{.column width=40%}
```{r}
#| echo: false
#| tbl-cap: "度数分布表の例"
tibble(x = c("投票した", "棄権した", "投票権がなかった"),
       y = table(df2$Voted),
       z = prop.table(table(df2$Voted)) * 100) |>
  gt() |>
  cols_align(columns = 2:3, align = "right") |>
  cols_label("x" = "値", "y" = "度数", "z" = "割合 (%)") |>
  tab_options(table.font.size = 32)
```
:::
::::

## カテゴリ変数のfactor化

`Voted`と`VotedParty`変数のfactor化（factor型変数：順序付きの文字型変数）

* `factor()`関数を使用
   * `levels =`には元の値を、`labels =`には各値に対応するラベルを指定

```{r}
#| code-line-numbers: "2-4"
df2 <- df2 |>
  mutate(Voted_F      = factor(Voted, levels = 1:3, labels = c("投票", "棄権", "選挙権なし")),
         VotedParty_F = factor(VotedParty, levels = 1:7,
                               labels = c("自民", "民進", "公明", "維新", "共産", "その他", "不明"))) 

df2
```

## カテゴリ変数のfactor化

```{r}
table(df2$Voted_F) # Voted_Fの度数分布表
table(df2$Voted_F) |> prop.table() * 100 # パイプ演算子も使用可能
  
table(df2$VotedParty_F) # VotedParty_Fの度数分布表
table(df2$VotedParty_F) |> prop.table() * 100 # パイプ演算子も使用可能
```

## 論文・レポートでの掲載方法

値、度数、割合、累積割合を掲載

```{r, echo = FALSE}
tibble(X = c("1. 投票", "2. 棄権", "3. 投票権なし"),
       Y = c(2208, 687, 105),
       V = c(73.6, 22.9, 3.5),
       Z = c(73.6, 96.5, 100.0)) |>
  gt() |>
  cols_label(X = "", Y = "度数 (人)", 
             V = "割合 (%)", Z = "累積割合 (%)") |> 
  tab_options(table.font.size = 32)
```

## ダミー変数

ある属性を備えているかどうかを示す変数

* 特定のカテゴリの属している場合は1、属さない場合は0の値をとる**二値変数**

<br/>

::::{.columns}
:::{.column width=40%}
ダミー変換**前**

```{r}
#| echo: false
df2 |>
  filter(ID %in% c(39:42, 46:48, 53:54)) |>
  select(ID, Voted_F) |>
  gt() |>
  cols_align(columns = 2, align = "left") |> 
  tab_options(table.font.size = 32)
```
:::

:::{.column width=10%}
:::

:::{.column width=50%}
ダミー変換**後**

```{r}
#| echo: false
df2 |>
  filter(ID %in% c(39:42, 46:48, 53:54)) |>
  select(ID, Voted_F) |>
  fastDummies::dummy_cols(select_columns = "Voted_F") |>
  gt() |>
  cols_label(Voted_F_投票       = "投票",
             Voted_F_棄権       = "棄権",
             Voted_F_選挙権なし = "選挙権なし") |>
  cols_align(columns = 2, align = "left") |> 
  tab_options(table.font.size = 32)
```
:::
::::

## ダミー変数の作成（`if_else()`使用）

* `mutate()`内に`if_else()`で作成

```{r}
df3 <- df2 |>
  mutate(Voted_F_Vote       = if_else(Voted_F == "投票", 1, 0),
         Voted_F_Absent     = if_else(Voted_F == "棄権", 1, 0),
         Voted_F_Ineligible = if_else(Voted_F == "選挙権なし", 1, 0))

df3 |>
  select(ID, Voted_F:Voted_F_Ineligible)
```

## ダミー変数の作成（{fastDummies}使用）

* `if_else()`を使う場合、ダミー変数名を自分で指定できるが、`dummy_cols()`の場合は「`元の変数名_値`」になるため、必要に応じて`rename()`を使用し、変数名を修正すること。

```{r}
library(fastDummies)
df4 <- df2 |>
  dummy_cols(select_columns = "Voted_F") # Voted_F変数のダミー化（「"」で囲むこと）

df4 |>
  select(ID, Voted_F:Voted_F_選挙権なし)
```

## 順序変数

順序尺度で測定された変数

* 例) 最終学歴
* カテゴリー変数のように扱うことも、連続変数のように扱うことも可能
   * 記述統計の表としてまとめる場合は、連続変数同様に扱う

## 記述統計掲載の例

```{r}
#| echo: false
df5 <- df |>
  select(ID          = USER_ID,   # 回答者ID
         Gender      = gender,    # 性別
         Age         = age,       # 年齢
         Education   = Q61,       # 最終学歴
         Voted       = Q15,       # 投票参加 (2016参院選)
         VotedParty  = Q15S2,     # 投票先 (2016参院選)
         T_Jimin     = Q5_7,      # 自民党に対する感情温度
         T_Minshin   = Q5_11) |>  # 立民に対する感情温度
  mutate(Female     = ifelse(Gender == 1, 0, 1),
         Education  = ifelse(Education == 1, 1, 0),
         Voted1     = ifelse(Voted == 1, 1, 0),
         Voted2     = ifelse(Voted == 2, 1, 0),
         Voted3     = ifelse(Voted == 3, 1, 0),
         Vote_LDP   = ifelse(VotedParty == 1, 1, 0),
         Vote_DPJ   = ifelse(VotedParty == 2, 1, 0),
         Vote_Komei = ifelse(VotedParty == 3, 1, 0),
         Vote_Ishin = ifelse(VotedParty == 4, 1, 0),
         Vote_CPJ   = ifelse(VotedParty == 5, 1, 0),
         Vote_Etc   = ifelse(VotedParty == 6, 1, 0),
         Vote_DK    = ifelse(VotedParty == 7, 1, 0)) |>
  select(Female, Age, Education, Voted1:Voted3, starts_with("Vote"),
         starts_with("T_"), -Voted, -VotedParty)

tibble(Cov    = names(df5),
       Vec    = map(Cov, ~select(df5, Cov = .x)),
       Mean   = map_dbl(Vec, ~mean(.x$Cov, na.rm = TRUE)),
       Median = map_dbl(Vec, ~median(.x$Cov, na.rm = TRUE)),
       SD     = map_dbl(Vec, ~sd(.x$Cov, na.rm = TRUE)),
       Min    = map_dbl(Vec, ~min(.x$Cov, na.rm = TRUE)),
       Max    = map_dbl(Vec, ~max(.x$Cov, na.rm = TRUE)),
       Obs    = map_dbl(Vec, ~sum(!is.na(.x$Cov)))) |>
  select(-Vec) |>
  mutate(Cov = c("女性", "年齢", "最終学歴", 
                 "投票有無: 投票", "投票有無: 棄権", "投票有無: 選挙権なし",
                 "投票先: 自民", "投票先: 民進", "投票先: 公明", 
                 "投票先: 維新", "投票先: 共産", "投票先: その他", 
                 "投票先: 不明", "感情温度: 自民", "感情温度: 民進")) |>
  gt() |>
  cols_label(Cov = "", Mean = "平均値", Median = "中央値",
             SD = "標準偏差", Min = "最小値", Max = "最大値",
             Obs = "有効ケース数") |>
  fmt_number(column = c(Mean, SD), decimals = 3) |>
  tab_options(table.font.size = 28)
```

## グループごとの記述統計量

::::{.columns}
:::{.column width=45%}
投票有無ごとの平均年齢

```{r}
df3 |>
  group_by(Voted_F) |>
  summarise(Age = mean(Age))
```
:::

:::{.column width=10%}
:::

:::{.column width=45%}
投票先ごとの民進党に対する感情温度

```{r}
df3 |>
  # VotedParty_Fの値が欠損している行を除外
  drop_na(VotedParty_F) |> 
  group_by(VotedParty_F) |>
  summarise(T_Minshin = mean(T_Minshin))
```
:::
::::

## 教科書との対応

副読本『[私たちのR: ベストプラクティスの探求](https://www.jaysong.net/RBook/)』

* `install.packages()`、`library()`：第5章
* `read_csv()`：第8章
* `dim()`：第10章
* `names()`、`select()`：第13章
* `summarise()`、`group_by()`、`mutate()`、`if_else()`：第15章
* `factor()`: 第16章
* グラフの作成: 第19〜22章

Rの操作になれていない場合、当該章のみを読んでも内容を理解することは難しい。これは文法を勉強せずに辞書を調べることと同じ行為である。プログラミング、ソフトウェアの使い方は積み上げが重要であるため、第1章から読むことを推奨（当該章のみ抜粋して読むことは、その後の話）
