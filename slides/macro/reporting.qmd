---
subtitle: "第13回 回帰分析の可視化"
date: "2023/12/21"
format: revealjs
metadata-files: 
  - _slide.yml
---

## 授業開始前に

```{r}
#| include: false
pacman::p_load(tidyverse, gt, summarytools, modelsummary,
               marginaleffects)

# df <- read_csv("slides/Data/M1.csv")
df <- read_csv("Data/M1.csv")

fit_lm     <- lm(Score_Mean ~ Order + First + Duration, data = df)
fit_logit  <- glm(Final ~ Order + First + Duration, data = df, 
                  family = binomial("logit"))
fit_inter1 <- lm(Score_Mean ~ Order * First + Duration, data = df)
fit_inter2 <- lm(Score_Mean ~ Order * Duration + First, data = df)
```

すぐに実習できるように準備しておきましょう。

1. JDCat分析ツールのRStudioを起動しておいてください。
2. 本日授業用のプロジェクトを作成してください。
3. LMSからダウンロードしてデータをプロジェクト・フォルダーにアップロードしてください。
   * プロジェクト・フォルダー内に`Data`フォルダーを作成し、そこにアップロードしましょう。
4. 実習用コードを入力するスクリプト、またはR Markdownを開き、以下のコードを入力&実行してください（コピペ可）。

```{r}
#| eval: false
library(tidyverse)
library(marginaleffects)

df <- read_csv("Data/M1.csv")

fit_lm     <- lm(Score_Mean ~ Order + First + Duration, data = df)
fit_logit  <- glm(Final ~ Order + First + Duration, data = df, family = binomial("logit"))
fit_inter1 <- lm(Score_Mean ~ Order * First + Duration, data = df)
fit_inter2 <- lm(Score_Mean ~ Order * Duration + First, data = df)
```

* トラブルが生じた場合、速やかにTAを読んでください。
* 時間に余裕があれば、スライド内のコードも書いておきましょう。

# 可視化の前に

## 可視化の手順

{marginaleffects}と{ggplot2}パッケージを使用（{ggplot2}は{tidyverse}と同時に自動的に読み込まれる）

1. `predictions()`（予測値）、`slopes()`（限界効果）関数で予測値、または限界効果を計算し、オブジェクトとして格納
   * 表形式オブジェクトとして格納される。
2. 予測値・限界効果オブジェクトの加工（ラベル付け/factor化）
   * 予測値/限界効果は`estimate`列
   * 95%信頼区間の下限と上限は`conf.low`と`conf.high`列
3. {ggplot2}を用いた作図
   * 予測値 + 95%信頼区間 / 限界効果 + 95%信頼区間
   * 横軸上の値が少ない場合、`geom_pointrange()`
   * 横軸上の値が多い場合、`geom_line()` + `geom_ribbon()`

## データの概要

```{r}
#| eval: false
library(tidyverse)
library(marginaleffects)

df <- read_csv("Data/M1.csv")
```

|変数名|説明|備考|
|:---|:------|:------|
|`No`|第X回大会||
|`Year`|大会年度||
|`Name`|コンビ名||
|`Duration`|結成からの経過年数||
|`First`|初出場ダミー|1 = 初出場 / 0 = その他|
|`Final`|ファイナルステージへの進出有無||
|`Order`|出場順番|1から10|
|`Score_Mean`|平均得点|7人の審査委員からの評価の平均値|

## モデルの推定

* M-1グランプリにおける出場順番と得点の関係
   * `fit_lm`: 線形回帰分析（応答変数: 平均得点）
   * `fit_logit`: ロジスティック回帰分析（応答変数: ファイナルステージへの進出有無）
   * `fit_inter1`: 線形回帰分析 + 交互作用（ダミー変数）
      * 初出場ダミー
   * `fit_inter2`: 線形回帰分析 + 交互作用（連続変数）
      * コンビー結成からの経過年数
   * 交互作用を仮定しない変数は統制変数として投入

```{r}
fit_lm     <- lm(Score_Mean ~ Order + First + Duration, data = df)
fit_logit  <- glm(Final ~ Order + First + Duration, data = df, family = binomial("logit"))
fit_inter1 <- lm(Score_Mean ~ Order * First + Duration, data = df)
fit_inter2 <- lm(Score_Mean ~ Order * Duration + First, data = df)
```

# 線形回帰分析

## 予測値の計算

:::{.panel-tabset}
### コード1

* 予測値は`Estimate`列、95%信頼区間の下限と上限はそれぞれ`2.5 %`と`97.5 %`列

```{r}
lm_pred <- predictions(fit_lm, newdata = datagrid(Order = 1:10))
lm_pred
```

### コード2

* 作図の際の列名は`data.frame()`関数で確認する。
   * 予測値は`estimate`、95%信頼区間の下限と上限は`conf.low`と`conf.high`

```{r}
data.frame(lm_pred)
```
:::

## 予測値の可視化

:::{.panel-tabset}
### コード

```{r}
#| eval: false
lm_pred %>%
  ggplot() +
  geom_pointrange(aes(x = Order, y = estimate, ymin = conf.low, ymax = conf.high)) +
  labs(x = "出場順番", y = "平均得点（100点満点）") +
  scale_x_continuous(breaks = 1:10, labels = 1:10) +
  theme_bw(base_size = 14) # Black & Whiteテーマを使用し、フォントサイズは14に
```

<br/>

#### 参考: `scale_x_continuous()`について

* 横軸上の変数が連続変数の場合、目盛りを調整する際に使用
* `breaks`は目盛りの位置、`lables`は目盛りのラベル
   * `breaks`と`labels`は同じ長さのベクトル

### 結果

```{r}
#| echo: false
#| fig-width: 8
#| fig-height: 3.75
lm_pred %>%
  ggplot() +
  geom_pointrange(aes(x = Order, y = estimate, ymin = conf.low, ymax = conf.high)) +
  labs(x = "出場順番", y = "平均得点（100点満点）") +
  scale_x_continuous(breaks = 1:10, labels = 1:10) +
  theme_bw()
```
:::

# ロジスティック回帰分析

## 予測値の計算

```{r}
logit_pred <- predictions(fit_logit, newdata = datagrid(Order = 1:10))

data.frame(logit_pred)
```

## 予測値の可視化

:::{.panel-tabset}
### コード

```{r}
#| eval: false
logit_pred %>%
  ggplot() +
  geom_pointrange(aes(x = Order, y = estimate, ymin = conf.low, ymax = conf.high)) +
  labs(x = "出場順番", y = "ファイナルステージへの進出確率") +
  scale_x_continuous(breaks = 1:10, labels = 1:10) +
  theme_bw()
```

### 結果

```{r}
#| echo: false
#| fig-width: 8
#| fig-height: 3.75
logit_pred %>%
  ggplot() +
  geom_pointrange(aes(x = Order, y = estimate, ymin = conf.low, ymax = conf.high)) +
  labs(x = "出場順番", y = "ファイナルステージへの進出確率") +
  scale_x_continuous(breaks = 1:10, labels = 1:10) +
  theme_bw()
```
:::

# 交互作用

## 予測値の計算（調整変数がダミー変数）

:::{.panel-tabset}

### コード

* `Order`だけでなく、調整変数（`First`）も残すこと

```{r}
inter1_pred <- predictions(fit_inter1, newdata = datagrid(Order = 1:10,
                                                          First = 0:1))

data.frame(inter1_pred)
```

### コード（2）

* `First`にラベルを付け、factor化

```{r}
inter1_pred <- inter1_pred %>%
  mutate(First = factor(First, levels = 0:1, labels = c("初出場", "出場経験あり")))

data.frame(inter1_pred)
```
:::

## 予測値の可視化（調整変数がダミー変数）

:::{.panel-tabset}
### コード

```{r}
#| eval: false
inter1_pred %>%
  ggplot() +
  geom_pointrange(aes(x = Order, y = estimate, ymin = conf.low, ymax = conf.high,
                      color = First)) + # color引数で色分け
  labs(x = "出場順番", y = "ファイナルステージへの進出確率", color = "") +
  scale_x_continuous(breaks = 1:10, labels = 1:10) +
  theme_bw() +
  theme(legend.position = "bottom")
```

### 結果

* 信頼区間が被っているため、読みにくい

```{r}
#| echo: false
#| fig-width: 8
#| fig-height: 3.5
inter1_pred %>%
  ggplot() +
  geom_pointrange(aes(x = Order, y = estimate, 
                      ymin = conf.low, ymax = conf.high,
                      color = First)) +
  labs(x = "出場順番", y = "ファイナルステージへの進出確率", color = "") +
  scale_x_continuous(breaks = 1:10, labels = 1:10) +
  theme_bw() +
  theme(legend.position = "bottom")
```
:::

## 予測値の可視化（調整変数がダミー変数）

:::{.panel-tabset}
### コード

* 折れ線グラフを使用（線の太さは`linewidth`で調整）

```{r}
#| eval: false
#| code-line-numbers: "3"
inter1_pred %>%
  ggplot() +
  geom_line(aes(x = Order, y = estimate, color = First), linewidth = 1) +
  labs(x = "出場順番", y = "ファイナルステージへの進出確率", color = "") +
  scale_x_continuous(breaks = 1:10, labels = 1:10) +
  theme_bw() +
  theme(legend.position = "bottom")
```

### 結果

* 95%信頼区間は?

```{r}
#| echo: false
#| fig-width: 8
#| fig-height: 3.5
inter1_pred %>%
  ggplot() +
  geom_line(aes(x = Order, y = estimate, color = First), linewidth = 1) +
  labs(x = "出場順番", y = "ファイナルステージへの進出確率", color = "") +
  scale_x_continuous(breaks = 1:10, labels = 1:10) +
  theme_bw() +
  theme(legend.position = "bottom")
```
:::

## 予測値の可視化（調整変数がダミー変数）

:::{.panel-tabset}
### コード

* `geom_ribbon()`で95%区間を線でなく**面**で表現する。
   * 面の色は`color`でなく、`fill`にマッピング
   * 半透明にするために`alpha = 0.3`を指定（0に近いほど透明）

```{r}
#| eval: false
#| code-line-numbers: "4"
inter1_pred %>%
  ggplot() +
  geom_line(aes(x = Order, y = estimate, color = First), linewidth = 1) +
  geom_ribbon(aes(x = Order, ymin = conf.low, ymax = conf.high, fill = First), alpha = 0.3) +
  labs(x = "出場順番", y = "ファイナルステージへの進出確率", 
       color = "", fill = "") +
  scale_x_continuous(breaks = 1:10, labels = 1:10) +
  theme_bw() +
  theme(legend.position = "bottom")
```

### 結果

```{r}
#| echo: false
#| fig-width: 8
#| fig-height: 3.75
inter1_pred %>%
  ggplot() +
  geom_line(aes(x = Order, y = estimate, color = First), linewidth = 1) +
  geom_ribbon(aes(x = Order, ymin = conf.low, ymax = conf.high,
                  fill = First), alpha = 0.3) +
  labs(x = "出場順番", y = "ファイナルステージへの進出確率", 
       color = "", fill = "") +
  scale_x_continuous(breaks = 1:10, labels = 1:10) +
  theme_bw() +
  theme(legend.position = "bottom")
```
:::

## 予測値の可視化（調整変数がダミー変数）

:::{.panel-tabset}
### コード

* `geom_line()`と`geom_ribbon()`は`x`に対してマッピングを共有しているため、`ggplot()`内でマッピングした方がより効率的

```{r}
#| eval: false
#| code-line-numbers: "2-5"
inter1_pred %>%
  ggplot(aes(x = Order)) +
  geom_line(aes(y = estimate, color = First), linewidth = 1) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = First), alpha = 0.3) +
  labs(x = "出場順番", y = "ファイナルステージへの進出確率", 
       color = "", fill = "") +
  scale_x_continuous(breaks = 1:10, labels = 1:10) +
  theme_bw() +
  theme(legend.position = "bottom")
```

### 結果

```{r}
#| echo: false
#| fig-width: 8
#| fig-height: 3.75
inter1_pred %>%
  ggplot(aes(x = Order)) +
  geom_line(aes(y = estimate, color = First), linewidth = 1) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high,
                  fill = First), alpha = 0.3) +
  labs(x = "出場順番", y = "ファイナルステージへの進出確率", 
       color = "", fill = "") +
  scale_x_continuous(breaks = 1:10, labels = 1:10) +
  theme_bw() +
  theme(legend.position = "bottom")
```
:::

## 予測値の計算（調整変数が連続変数）

:::{.panel-tabset}
### コード（1）

* 結成からの経過年数（`Duration`） = 1、2、3、...全てに対して線を引くと表が読みにくくなるため、経過年数が2年、9年、16年のみの予測値を計算

```{r}
inter2_pred <- predictions(fit_inter2, newdata = datagrid(Order = 1:10,
                                                          Duration = c(2, 9, 16)))

data.frame(inter2_pred)
```

### コード（2）

* `Duration`にラベルを付け、factor化

```{r}
inter2_pred <- inter2_pred %>%
  mutate(Duration = factor(Duration, levels = c(2, 9, 16), 
                           labels = c("2年目", "9年目", "16年目")))

data.frame(inter2_pred)
```
:::

## 予測値の可視化（調整変数が連続変数）

:::{.panel-tabset}
### コード

```{r}
#| eval: false
inter2_pred %>%
  ggplot(aes(x = Order)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = Duration), 
              alpha = 0.3) +
  geom_line(aes(y = estimate, color = Duration), linewidth = 1) +
  labs(x = "出場順番", y = "ファイナルステージへの進出確率", 
       color = "結成からの経過年数", fill = "結成からの経過年数") +
  scale_x_continuous(breaks = 1:10, labels = 1:10) +
  theme_bw() +
  theme(legend.position = "bottom")
```

### 結果

```{r}
#| echo: false
#| fig-width: 8
#| fig-height: 3.75
inter2_pred %>%
  ggplot(aes(x = Order)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = Duration), 
              alpha = 0.3) +
  geom_line(aes(y = estimate, color = Duration), linewidth = 1) +
  labs(x = "出場順番", y = "ファイナルステージへの進出確率", 
       color = "結成からの経過年数", fill = "結成からの経過年数") +
  scale_x_continuous(breaks = 1:10, labels = 1:10) +
  theme_bw() +
  theme(legend.position = "bottom")
```
:::

## 限界効果の計算（調整変数がダミー変数）

:::{.panel-tabset}
### コード（1）

* 主な説明変数（ここでは`Order`列）は抽出しなくても良い

```{r}
inter1_ame <- slopes(fit_inter1, variables = "Order",
                     newdata = datagrid(First = 0:1))
inter1_ame <- inter1_ame %>%
  select(First, predicted, std.error, conf.low, conf.high)

inter1_ame
```

### コード（2）

* `First`にラベルを付け、factor化

```{r}
inter1_ame <- inter1_ame %>%
  mutate(First = factor(First, levels = 0:1, labels = c("初出場", "出場経験あり")))

inter1_ame
```
:::

## 限界効果の可視化（調整変数がダミー変数）

:::{.panel-tabset}
### コード

```{r}
#| eval: false
inter1_ame %>%
  ggplot() +
  geom_hline(yintercept = 0) +
  geom_pointrange(aes(x = First, y = predicted, ymin = conf.low, ymax = conf.high)) +
  labs(x = "出場経験", y = "出場順番の平均限界効果") +
  theme_bw(base_size = 12)
```

### 結果

```{r}
#| echo: false
#| fig-width: 8
#| fig-height: 3.75
inter1_ame %>%
  ggplot() +
  geom_hline(yintercept = 0) +
  geom_pointrange(aes(x = First, y = predicted, ymin = conf.low, ymax = conf.high)) +
  labs(x = "出場経験", y = "出場順番の平均限界効果") +
  theme_bw(base_size = 12)
```
:::

## 限界効果の計算（調整変数が連続変数）

* 調整変数が連続変数の場合、調整変数のfactor化は不要（やっても良い）

```{r}
inter2_ame <- slopes(fit_inter2, variables = "Order",
                     newdata = datagrid(Duration = 2:16))

inter2_ame <- inter2_ame %>%
  select(Duration, predicted, std.error, conf.low, conf.high)

inter2_ame
```

## 限界効果の可視化（調整変数が連続変数）

:::{.panel-tabset}
### コード

```{r}
#| eval: false
inter2_ame %>%
  ggplot(aes(x = Duration)) +
  geom_hline(yintercept = 0) +
  geom_ribbon(aes(y = predicted, ymin = conf.low, ymax = conf.high),
              alpha = 0.3) +
  geom_line(aes(y = predicted), linewidth = 1) +
  labs(x = "結成からの経過年数", y = "出場順番の平均限界効果") +
  theme_bw(base_size = 14)
```

### 結果

```{r}
#| echo: false
#| fig-width: 8
#| fig-height: 3.75
inter2_ame %>%
  ggplot(aes(x = Duration)) +
  geom_hline(yintercept = 0) +
  geom_ribbon(aes(y = predicted, ymin = conf.low, ymax = conf.high),
              alpha = 0.3) +
  geom_line(aes(y = predicted), linewidth = 1) +
  labs(x = "結成からの経過年数", y = "出場順番の平均限界効果") +
  theme_bw(base_size = 14)
```
:::
