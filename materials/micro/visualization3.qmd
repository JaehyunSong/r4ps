---
title: "第14回講義資料"
subtitle: "可視化 (3)"
toc: true
metadata-files: 
  - _material.yml
---

## スライド {.unlisted}

<a href="../../slides/micro/visualization3.html" class="btn btn-primary btn-sm" target="_blank" role="button"><i class="bi bi-window"></i> 新しいタブで開く</a>

```{=html}
<iframe class="slide-deck" src="../../slides/micro/visualization3.html" width="100%" style="aspect-ratio: 16 / 9.5;"></iframe>
```

```{r}
#| include: false
library(tidyverse)
df <- read_csv("Data/countries.csv")
```

## 散布図

### 散布図の作成

散布図は2つの連続変数（=間隔尺度、比率尺度で測定された変数）間の関係を調べる代表的な可視化方法である。散布図を作成する際に必要な**最低限**の情報、つまり散布図の必須要素は何だろうか。例えば、 @fig-scatter-example の例を考えてみよう。この散布図はフリーダムハウスのスコアと人間開発指数の関係を表す散布図である。それぞれの点は一つの観察（国 or 地域）を意味する。散布図は2次元平面上に複数の点を載せたものであるが、それぞれの点はどのような情報を含んでいるのか。それは、その国（ or 地域）のフリーダムハウス・スコアと人間開発指数であり、それぞれ横軸の上の位置と縦軸上の位置から、その情報が読み取れる。

```{r fig-scatter-example}
#| echo: false
#| fig-width: 4
#| fig-height: 4
#| warning: false
#| fig-cap: "2次元散布図の例"
df |>
   ggplot() +
   geom_point(aes(x = FH_Total, y = HDI_2018)) +
   labs(x = "フリーダムハウス・スコア", y = "人間開発指数 (2018)") +
   theme_gray(base_size   = 14)
```

　それでは @fig-scatter-example を作ってみよう。使用するデータは第9回実習用データ（`countries.csv`）である。

```{r}
#| filename: "Code 01"
#| eval: false
library(tidyverse)
df <- read_csv("Data/countries.csv")
```

　散布図を作成するためには`geom_point()`幾何オブジェクトを使用する。点の横軸上の位置は`x`に、縦軸上の位置は`y`にマッピングする。もし2つの変数の間に原因と結果の関係（因果関係）が考えられる2変数の場合、**原因を横軸**、**結果を縦軸**にするのが通例である。

```{r}
#| filename: "Code 02"
#| fig-width: 8
#| fig-height: 5
#| warning: false
df |>
   ggplot() +
   geom_point(aes(x = FH_Total, y = HDI_2018))
```

　しかし、横軸と縦軸のタイトルがFH_Total、HDI_2018になっている。図を作った人から見れば、これが何を意味するのか分かるだろうが、この図を初めて見る人にとっては何を意味するのかが分からないだろう。したがって、ラベル修正を修正し、せっかくなので点の色をおしゃれなロイヤルブルー（royal blue）にしてみよう。

```{r}
#| filename: "Code 03"
#| fig-width: 8
#| fig-height: 5
#| warning: false
df |>
   ggplot() +
   geom_point(aes(x = FH_Total, y = HDI_2018), color = "royalblue") +
   labs(x = "フリーダムハウス・スコア", y = "人間開発指数 (2018)")
```

### 次元の追加

　通常の散布図、例えば先ほど作成した散布図には、それぞれの点は各国の (1) フリーダムハウス・スコアと (2) 人間開発指数といった2つの情報を持つ。つまり、通常の散布図は2次元である。しかし、散布図は5次元、7次元までにも拡張することができる。たとえば、大陸ごとに色分けをすることによってもう一つの情報を持たせることも可能だし、人口や所得に応じて点の大きさを変えることも可能だろう。また、定番のファセット分割もできる。他にも点の枠線、点の形、透明度などに何かの情報を持たせることも可能である。

　このように高次元の散布図を作ることはできる。ただし、宋は3次元までを推奨する（ファセット分割まで入れる場合、4次元）。なぜなら、一つのグラフの情報が多すぎると読みにくくなるからである。 @fig-5d-scatter は5次元散布図の例である。各点はフリーダムハウス・スコア、人間開発指数、人口（対数変換）、大陸、OECD加盟有無の情報を持つ。

```{r fig-5d-scatter}
#| filename: "Code 04"
#| fig-width: 10
#| fig-height: 4
#| warning: false
#| fig-cap: "5次元散布図の例"
df |>
   mutate(OECD = if_else(OECD == 1, "Member", "Non-member")) |>
   ggplot() +
   geom_point(aes(x = FH_Total, y = HDI_2018, color = Continent,
                  size = Population, shape = OECD), alpha = 0.65) +
   scale_size_continuous(trans = "log10") +
   labs(x = "Freedom House Score", y = "Human Development Index (2018)",
        size = "Population (log)")
```

　2次元散布図にもう一つの次元を追加、つまり3次元散布図を作成する場合は色分け（`color`）を推奨するが、白黒の図を作成する場合は形（`shape`）を使う必要がある。まずは色分けから説明しよう。色分けをする場合は、`aes()`の内部に`color = 色分けする変数`を指定する。

　たとえば、一人上がり購買力平価GDP（`PPP_per_capita`）が2万ドル以上か未満かで点の色分けをするとしよう。まず、`PPP_per_capita`が2万以上なら`"高"`、未満なら`"低"`にリコーディングした`HighIncome`変数を作成する。つづいて、この`HighIncome`変数を利用し、点の色分けを行う（`color = HighIncome`）

　他のカスタマイズとしては作図する側の自由であるが、ここでは点の大きさは2にし（全体に適用させるため、`aes()`の外側に指定）、`labs()`内で凡例タイトルを修正し、凡例を下側へ移動してみる。作成した図は`scatter_plot1`という名のオブジェクトとして格納しておく。

```{r}
#| filename: "Code 05"
#| fig-width: 8
#| fig-height: 5
#| warning: false
scatter_plot1 <- df |>
   # 散布図に使われる変数が一つでも欠損していれば、その行（国）は除外する
   drop_na(FH_Total, HDI_2018, PPP_per_capita) |>
   # リコーディング
   mutate(HighIncome = if_else(PPP_per_capita >= 20000, "高", "低")) |>
   ggplot() +
   geom_point(aes(x = FH_Total, y = HDI_2018, color = HighIncome), 
              size = 2) +
   # ラベル修正
   labs(x = "フリーダムハウス・スコア", y = "人間開発指数 (2018)",
        color = "一人当たりPPP GDP") +
   # 凡例を下側に
   theme(legend.position = "bottom")

scatter_plot1
```

　もし、点の色を変更したい場合は`scale_color_manual()`レイヤーを追加する。引数は`values`であり、`c("値1" = "色1", "値2" = "色2", ...)`のように名前付きcharacter型ベクトルを指定する。たとえば、`HighIncome`の値が`"低"`ならオレンジ色（`"orange"`）、`"高"`ならロイヤルブルー色（`"royalblue"`）にしてみよう。

```{r}
#| filename: "Code 06"
#| fig-width: 8
#| fig-height: 5
#| warning: false
scatter_plot1 +
   scale_color_manual(values = c("低" = "orange", "高" = "royalblue"))
```

　{ggplot2}で使える色は無数にある。`"red"`、`"blue"`、`"royalblue"`のように文字で指定することもでき、全657種類が用意されている[^ggplot2-color]。他にもRGBカラー（HEXコード; 16進数）で指定することもでる。たとえば赤なら`"#FF0000"`、ロイヤルブルーなら`"#4169E1"`と表記する。HEXコードを使う場合、非常に細かく色を指定することができ、全16,777,216種類の色が使える。以下の例はRで使える色の**一部**である。

[^ggplot2-color]: Googleなどで「ggplot2 color」で検索してみれば、たくさんの資料が見られる（[例](http://sape.inf.usi.ch/quick-reference/ggplot2/colour)）。

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 10
data.frame(c = colors()) |>
   mutate(Num = grepl(x = c, pattern = "[0-9]$")) |>
   filter(Num == FALSE) |>
   mutate(y = seq(0, length(c) - 1) %% 18,
          x = seq(0, length(c) - 1) %/% 18) |>
   ggplot() +
   scale_x_continuous(name = "", breaks = NULL, expand = c(0, 0)) +
   scale_y_continuous(name = "", breaks = NULL, expand = c(0, 0)) +
   scale_fill_identity() +
   geom_rect(aes(xmin = x, xmax = x + 1, ymin = y, ymax = y + 1), 
             fill = "white") +
   geom_rect(aes(xmin = x + 0.05, xmax = x + 0.95, 
                 ymin = y + 0.5, ymax = y + 1, fill = c)) +
   geom_text(aes(x = x + 0.5, y = y + 0.5, label = c), 
             color = "black", hjust = 0.5, vjust = 1, size = 4)
```

　Rで使用可能な色のリストはコンソール上で`colors()`を打ち込むと確認できる。

```{r}
#| filename: "Code 07"
colors()
```

　図を白黒で印刷する場合、色によっては区別がつかない可能性がある。この場合、点の形を修正すれば、白黒でも識別できるだろう。点の形は`aes()`内に`shape`で指定することができる。たとえば、`scatter_plot1`と同じ図を、今回は色分けせず形分けをしてみよう。

```{r}
#| filename: "Code 08"
#| fig-width: 8
#| fig-height: 5
#| warning: false
scatter_plot2 <- df |>
   drop_na(FH_Total, HDI_2018, PPP_per_capita) |>
   mutate(HighIncome = if_else(PPP_per_capita >= 20000, "高", "低")) |>
   ggplot() +
   geom_point(aes(x = FH_Total, y = HDI_2018, shape = HighIncome), 
              size = 2) +
   labs(x = "フリーダムハウス・スコア", y = "人間開発指数 (2018)",
        shape = "一人当たりPPP GDP") +
   theme(legend.position = "bottom")

scatter_plot2
```

　点の形を自分で調整したい場合は`scale_shape_manual()`を使用する。使い方は`scale_color_manual()`と同じであるが、色は`"red"`や`"blue"`など、人間が分かる名前になっているに対し、形は1、2、3などの数値を使う。たとえば、4はバツ記号、1は中身が空っぽの丸である。

```{r}
#| filename: "Code 09"
#| fig-width: 8
#| fig-height: 5
#| warning: false
scatter_plot2 +
   scale_shape_manual(values = c("低" = 4, "高" = 1))
```

　Rで使えるデフォルトの`shape`は全23種類があり（0から22まで）、デフォルトは19である。0〜14の場合、中身が透明であり、枠線のみの形である。枠線の色を変えたい場合は`color`引数で調整できる。また15から20までは中身が埋まっており、枠線のない形である。この中身の色も`color`で調整可能である。注意が必要なのは21番と22番であり、21と22の場合、枠線は`color`、内側の色塗りは`fill`で調整する必要がある。

```{r}
#| echo: false
#| fig-width: 4
#| fig-height: 3.5
tibble(x = rep(1:5, 5),
       y = rep(1:5, each = 5)) |>
   filter(!(y == 1 & x >= 4)) |>
   arrange(desc(y), x) |>
   mutate(pch = as.character(0:22)) |>
   ggplot(aes(x = x, y = y)) +
   geom_point(aes(shape = pch), 
              color = "black", bg = "gray", size = 3) +
   geom_text(aes(y = y + 0.25, label = pch), size = 5) +
   scale_shape_manual(values = c("1"  =  1,  "2" =  2, "3"  =  3, "4"  =  4,
                                 "5"  =  5,  "6" =  6, "7"  =  7, "8"  =  8,
                                 "9"  =  5, "10" = 10, "11" = 11, "12" = 12,
                                 "13" = 13, "14" = 14, "15" = 15, "16" = 16,
                                 "17" = 17, "18" = 18, "19" = 19, "20" = 20,
                                 "21" = 21, "22" = 22, "0"  = 0)) +
   theme_minimal() +
   theme(panel.grid.minor = element_blank(),
         axis.line = element_blank(),
         axis.title = element_blank(),
         axis.text = element_blank(),
         legend.position = "none")
```

## 折れ線グラフ

　折れ線グラフはある連続変数が経時的に変化する具合を示す際に使われる最も代表的なグラフである。たとえば、株価の変動を示す場合、横軸は日付、縦軸は株価となるだろう。この日付は順序変数であり、株価は連続変数である。この意味で、折れ線グラフは順序変数$\times$連続変数間の関係を調べるときにも使用可能である。

### 折れ線グラフの作成

　以下の @fig-line-example1 を見てみよう。この折れ線グラフにおける「線」にはどのような情報があるだろうか。実はこの線自体には大きな意味を持たない。大事なのはこの線の傾きが変化し得る「点」である。

```{r fig-line-example1}
#| fig-cap: "折れ線グラフの例 (1)"
#| echo: false
#| fig-width: 5
#| fig-height: 5
#| warning: false
COVID_df <- read_csv("Data/covid_2022_06.csv")
COVID_df |>
   ggplot(aes(x = Day, y = NewCases)) +
   geom_line(aes(group = Country)) +
   labs(x = "日 (2022年6月)", y = "100万人当たり新規感染者数 (人)") +
   theme_bw(base_size   = 14)
```

つまり、折れ線グラフはとは @fig-line-example2 のように各線の傾きが変わり得る点を線で繋いだだけである。座標平面上に点を載せるという意味で、折れ線グラフのマッピング要素は散布図のそれと大きく変わらない。

```{r fig-line-example2}
#| fig-cap: "折れ線グラフの例 (2)"
#| echo: false
#| fig-width: 5
#| fig-height: 5
#| warning: false
COVID_df <- read_csv("Data/covid_2022_06.csv")
COVID_df |>
   ggplot(aes(x = Day, y = NewCases)) +
   geom_line(aes(group = Country)) +
   geom_point(size = 3) +
   labs(x = "日 (2022年6月)", y = "100万人当たり新規感染者数 (人)") +
   theme_bw(base_size   = 14)
```

　つまり、折れ線グラフの必須要素とは線の傾きが変化し得る点の**横**軸上の位置（`x`）と線の傾きが変化し得る点の**縦**軸上の位置（`y`）であり、線はその点を繋いだだけである。 @fig-line-example1 の例だと、横軸は日付、縦軸は100万人当たり新規感染者数である。ただし、一つ注意が必要であり、それは線が2本以上ある場合だ。線が2本以上存在する折れ線グラフの場合、どの点とどの点を繋げばいいかを指定する必要がある。言い換えれば、それぞれの点がどのグループの点なのかを明確にしておく必要がある（`groups`）。

　それでは、折れ線グラフを作ってみよう。最初に折れ線グラフの作成にひつ表なデータを読み込む。データは授業サポートページから実習用データ（`Micro14.csv`）をダウンロード可能であり、整然データとして加工済みのデータである。このデータは2つの変数で構成されており、`Country`は国名、`Day`は日付（2022年6月）、`NewCases`は100万人当りCOVID-19新規感染者数を意味する。

```{r}
#| filename: "Code 10"
#| message: false
COVID_df <- read_csv("Data/covid_2022_06.csv")
COVID_df
```

　まず、線が一本の場合の折れ線グラフから始めよう。今のデータには複数の国があるので`filter(Country == "Japan")`で日本のみを抽出し、`ggplot()`関数に渡す。使用する幾何オブジェクトは`geom_line()`、マッピングは散布図と同様、`x`と`y`に対して行う。

```{r}
#| filename: "Code 11"
#| fig-width: 5
#| fig-height: 5
COVID_df |>
   filter(Country == "Japan") |>
   ggplot() +
   geom_line(aes(x = Day, y = NewCases)) +
   labs(x = "日 (2022年6月)", y = "100万人当たり新規感染者数 (人)")
```

:::{.callout-note}
### 折れ線グラフでよく出るメッセージ

　折れ線グラフを作成する際、以下のようなエラーメッセージが表示され、グラフが出力されない場合がある（原因は不明）。

```
geom_path: Each group consists of only one observation. Do you need to adjust the group aesthetic?
```

　このようなメッセージが出た場合は、`aes()`の中に`group = 1`を追加すると解決できる。
:::

　問題は線が二本以上ある場合だ。しかし、解決方法は簡単であり、`aes()`の中に`group`引数を追加するだけである。一本一本の線が国（or 地域）を意味するので、ここでは`group = Country`を入れるだけである。それでは今回は日本に限定せず、`COVID_df`の全ケースを使って折れ線グラフを作ってみよう。まず、`Covid_df`の`Country`列を日本語にリコーディングし、要素の順番は日本、韓国、台湾の順にする。

```{r}
#| filename: "Code 12"
COVID_df <- COVID_df |>
   mutate(Country = case_when(Country == "Japan" ~ "日本",
                              Country == "Korea" ~ "韓国",
                              TRUE               ~ "台湾"),
          Country = factor(Country, levels = c("日本", "韓国", "台湾")))

COVID_df
```

```{r}
#| filename: "Code 13"
#| fig-width: 5
#| fig-height: 5
COVID_df |>
   ggplot() +
   geom_line(aes(x = Day, y = NewCases, group = Country)) +
   labs(x = "日 (2022年6月)", y = "100万人当たり新規感染者数 (人)")
```

　ただし、これでも問題は残る。どの線が日本で、どの線が韓国かが分からない。この場合、線の色分けを行うか、国・地域ごとに線の種類を分ける必要がある。まずは、おなじみの色分けは`aes()`の中に`color`を追加するだけである。また、線がやや細いので、若干太めに調整する。線の太さは`aes()`の外に`linewidth`で調整可能である。

```{r}
#| filename: "Code 14"
#| fig-width: 7
#| fig-height: 5
COVID_df |>
   ggplot() +
   geom_line(aes(x = Day, y = NewCases, group = Country, color = Country), 
             linewidth = 1.5) +
   labs(x = "日 (2022年6月)", y = "100万人当たり新規感染者数 (人)", 
        color = "国/地域")
```

　もう一つの方法は`color`でなく、`linetype`で線のタイプを調整することだ。とりわけ、白黒図の場合、色分けは有効ではないため、線で国・地域を識別する必要があろう。

```{r}
#| filename: "Code 15"
#| fig-width: 8
#| fig-height: 3.5
COVID_df |>
   ggplot() +
   geom_line(aes(x = Day, y = NewCases, group = Country, 
                 linetype = Country), linewidth = 1) +
   labs(x = "日 (2022年6月)", y = "100万人当たり新規感染者数 (人)", 
        linetype = "国/地域") 
```

　ただし、韓国と台湾の線はどれも破線に近く、区別しにくい。ここで韓国は破線、台湾は点線に変更してみよう。自分で線のタイプを指定したい場合は`scale_linetype_manual()`レイヤーを追加し、`values`引数にそれぞれの線のタイプを指定する。

```{r}
#| filename: "Code 16"
#| fig-width: 8
#| fig-height: 3.5
COVID_df |>
   ggplot() +
   geom_line(aes(x = Day, y = NewCases, group = Country, 
                 linetype = Country), linewidth = 1) +
   labs(x = "日 (2022年6月)", y = "100万人当たり新規感染者数 (人)", 
        linetype = "国/地域") +
   scale_linetype_manual(values = c("日本" = 1, "韓国" = 2, "台湾" = 3))
```

　`linetype`で指定可能な線のタイプは6種類である。しかし、一部の線は見た目が非常に似ている。たとえば2と5、4と6は非常に似ており、実際の図になるとより区別がつかなくなる。線が4本以上になったらファセット分割などを使う必要がある。実線（1）、破線（2）、点線（3）まで使うことが良いだろう。

```{r}
#| echo: false
#| fig-width: 8
#| fig-height: 2.5
tibble(x = rep(1, 6),
       xend = rep(5, 6),
       y = 1:6,
       yend = 1:6,
       type = c("6", "5", "4", "3", "2", "1")) |>
   ggplot() +
   geom_segment(aes(x = x, xend = xend, 
                    y = y, yend = yend, linetype = type)) +
   scale_y_continuous(breaks = 1:6, labels = 6:1) +
   scale_linetype_manual(values = c("1" = 1, "2" = 2, "3" = 3, 
                                    "4" = 4, "5" = 5, "6" = 6)) +
   labs(y = "linetypeの値") +
   theme_minimal(base_size = 14) +
   theme(panel.grid = element_blank(),
         axis.title.x = element_blank(),
         axis.text.x = element_blank(),
         legend.position = "none")
```

　線が4本以上の場合は色分けや、以下のようなファセット分割を考慮すべきである。

```{r}
#| filename: "Code 17"
#| fig-width: 8
#| fig-height: 3.5
COVID_df |>
   ggplot() +
   geom_line(aes(x = Day, y = NewCases, group = Country), linewidth = 1) +
   labs(x = "日 (2022年6月)", y = "100万人当たり新規感染者数 (人)", 
        linetype = "国/地域") + 
   facet_wrap(~Country, ncol = 3)
```

　ファセット分割の際、知っておくと便利な機能として`facet_wrap()`内の`scales`引数である。上の図だと、台湾の存在により、日本と韓国は比較的変化がないようにも見える。実際、新規感染者数がそれなりに安定しているとは考えられるが、ファセットごとに縦軸のスケールを別々にすることもできる。縦軸のスケールをファセットごとに付ける場合は`scales = "free_y"`を追加する。他にもファセットごとに横軸スケールを付ける`"free_x"`や両方を対象とする`"free"`が使える。

```{r}
#| filename: "Code 18"
#| fig-width: 8
#| fig-height: 3.5
COVID_df |>
   ggplot() +
   geom_line(aes(x = Day, y = NewCases, group = Country), linewidth = 1) +
   labs(x = "日 (2022年6月)", y = "100万人当たり新規感染者数 (人)", 
        linetype = "国/地域") + 
   facet_wrap(~Country, ncol = 3, scales = "free_y")
```

　ただし、このようにファセットごとにスケールが異なると、実はあまり大きくない変動が大きく見えてしまうデメリットもある。たとえば、この図だけだと日本と台湾は急激な減少傾向、韓国は非常に大きいリバウンドが生じているかのようにも見える。しかし、たしかに台湾は減少傾向ではあるが、日韓はかなり安定していると考えられる。ある意味、異なるスケールを使うことによって、人を騙すこともできるということだ。作図の際は注意しよう。

### 折れ線グラフ + 散布図

　もう一つの方法として折れ線グラフに散布図を追加することもできる。線の傾きが変化する（可能性がある）点に散布図をオーバラップし、点の形を国・地域ごとに異なるように設定すれば良い。そのためには、`geom_point()`と`geom_line()`を重ねる必要があるが、後に書いたレイヤーが前面に表示されることに注意されたい。また、点は線より大きめのほうが見やすいだろう。

　それではそれぞれの幾何オブジェクトについて考えてみよう。折れ線グラフ（`geom_line()`）は国・地域ごとに色分けをするため、`x`、`y`、`group`、`color`に対してマッピングを行う。続いて、散布図（`geom_point()`）は国・地域ごとに色分け・形分けをするので`x`、`y`、`color`、`shape`に対してマッピングをする。

```{r}
#| filename: "Code 19"
#| fig-width: 8
#| fig-height: 4
COVID_df |>
   ggplot(aes()) +
   geom_line(aes(x = Day, y = NewCases, color = Country, group = Country), 
             linewidth = 1) +
   geom_point(aes(x = Day, y = NewCases, color = Country, shape = Country), 
              size = 3) +
   labs(x = "日 (2022年6月)", y = "100万人当たり新規感染者数 (人)", 
        color = "国/地域", shape = "国/地域") +
   scale_color_manual(values = c("日本" = "royalblue",
                                 "韓国" = "darkred",
                                 "台湾" = "forestgreen")) +
   theme_bw()
```

　以上のコードを見ると、2つの幾何オブジェクトは`x`、`y`、`color`が同じ変数にマッピングされている。実は全幾何オブジェクトに共通するマッピングは`ggplot()`内で行うことができる。

```{r}
#| filename: "Code 20"
#| fig-width: 8
#| fig-height: 4
COVID_df |>
   # 共通するマッピングはggplot()内で指定可能
   ggplot(aes(x = Day, y = NewCases, color = Country)) +
   geom_line(aes(group = Country), linewidth = 1) +
   geom_point(aes(shape = Country), size = 3) +
   labs(x = "日 (2022年6月)", y = "100万人当たり新規感染者数 (人)", 
        color = "国/地域", shape = "国/地域") +
   scale_color_manual(values = c("日本" = "royalblue",
                                 "韓国" = "darkred",
                                 "台湾" = "forestgreen")) +
   theme_bw()
```

## 箱ひげ図

### 箱ひげ図の作成

　箱ひげ図は**連続**変数の分布を示す方法の一つであり、ヒストグラムと共に幅広く使われる可視化手法である。ただし、箱ひげ図はヒストグラムのように「どの辺が最も密度が高いか」を調べるよりも、特定の変数の記述統計量を素早く比較することに特化している。箱ひげ図を使えば、変数の**最小値**、**最大値**、**第一四分位数**、第二四分位数（**中央値**）、**第三四分位数**と極端な値である**外れ値**を素早くキャッチすることができる。

　また、箱ひげ図のもう一つの特徴として、色分けやファセット分割を行わず、変数の分布を**グループごと**に見ることができるといったメリットがある。まずは箱ひげ図の読み方を @fig-box-example を見ながら説明しよう。

```{r fig-box-example}
#| fig-cap: "箱ひげ図の例"
#| echo: false
#| fig-width: 4
#| fig-height: 4
#| warning: false
df |>
   ggplot() +
   geom_boxplot(aes(x = 1, y = HDI_2018), width = 0.5) +
   annotate("text", x = 1.3, y = 0.7325, label = "中央値", hjust = 0) +
   annotate("text", x = 1.3, y = 0.5870, label = "第一四分位数", hjust = 0) +
   annotate("text", x = 1.3, y = 0.8347, label = "第三四分位数", hjust = 0) +
   annotate("text", x = 1.05, y = 0.3770, label = "最小値", hjust = 0) +
   annotate("text", x = 1.05, y = 0.9540, label = "最大値", hjust = 0) +
   labs(x = "", y = "人間開発指数 (2018)") +
   coord_cartesian(xlim = c(0.75, 1.5)) +
   theme_minimal() +
   theme(axis.text.x = element_blank())
```

　まず、四分位数であるが、これは箱の最上段（第三四分位数）、最下段（第一四分位数）、その間の線（第二四分位数 = 中央値）である。四分位数とはたとえば、以下のようなベクトルがあるとしよう。

```{r}
#| filename: "Code 21"
my_vec1 <- c(5, 1, 11, 2, 4, 2, 6, 15, 7, 8, 9)
my_vec1
```

　これを小さい値から大きい値の方向へ並び替えると以下のようになる。

```{r}
#| filename: "Code 22"
sort(my_vec1)
```

　この数例の中で真ん中の値が第二四分位数、つまり中央値である。`my_vec1`は長さ11のベクトルであるため、6番目の6が第二四分位数（中央値）である。続いて、中央値を基準に、中央値よりも大きい数列（`my_vec2`）と、小さい数例（`my_vec3`）に分ける。

::::{.columns}

:::{.column width=49%}
```{r}
#| filename: "Code 23a"
my_vec2 <- my_vec1[my_vec1 > 6]

my_vec2
```
:::

:::{.column width=2%}
:::

:::{.column width=49%}
```{r}
#| filename: "Code 23b"
my_vec3 <- my_vec1[my_vec1 < 6]

my_vec3
```
:::

::::

　ここで更に`my_vec2`と`my_vec3`の中央値を求める。`my_vec2`の中央値は9、`my_vec3`の中央値は2である。中央値より小さい数例における中央値（2）が第一四分位数、もう片方（9）が第三四分位数である。ちなみに中央値は`median()`関数から求めることもできる。したがって、四分位数は2、6、9である。第二四分位数は中央値とも呼ばれ平均値とともに幅広く使われる、変数を代表する値である。また第一四分位数と第三四分位数はそれぞれ使われるよりも、2つの組み合わせで使うケースが多い。それは第一四分位数と第三四分位数の間には半分の値が属するとく特徴である（長さが奇数の変数だとぴったり半分にはならないが、おおよそ半分）。今回はそれぞれ2と9であり、2より大きく、9より小さい要素は計5個である。`my_vec1`の長さが11であることを考えると、約半分である。つまり、箱ひげ図の箱だけでも「この変数の真中の値はXXであり、YY〜ZZの間に約半分の値が集まっている」ことが分かる。この箱が小さいほど、狭い範囲内に値が密集していることが分かる。また、第一四分位数と第三四分位数の距離は四分位範囲（IQR）とも呼ばれる。`my_vec1`の例だと、2と9の距離、つまりIQR = 7である。

　続いて、箱ひげ図のひげの部分だ。ひげの最上段はその変数の最大値、最下段は最小値を意味する。`my_vec1`の例だと、最小値は1、最大値は15である。しかし、実際の箱ひげ図における最小値/最大値と、その変数の最小値/最大値が一致しないケースもある。それは外れ値の存在が原因である。中央から極端に離れている値を外れ値と呼び、箱ひげ図の最小値と最大値は外れ値を除いた最小値と最大値である[^outliar]。

[^outliar]: 箱ひげ図における外れ値は、最大値の場合は(第三四分位数 + 1.5 $\times$ IQR)より大きい値、最小値の場合は(第一四分位数 - 1.5 $\times$ IQR)より小さい値を意味する。`my_vec1`の例だと19.5（= 9 + 1.5 $\times$ 7）より大きい値と-8.5（= 2 - 1.5 $\times$ 7）より小さい値が外れ値となる。

　それでは`df`を使い、人間開発指数 (`HDI_2018`) の箱ひげ図を作ってみよう。幾何オブジェクト名は`geom_boxplot()`であり、一変数の分布を確認する意味で、ヒストグラムのようにマッピングは一つのみでよい。通常、`y`にマッピングするが、`x`でも問題ない。`y`にマッピングすると @fig-box-mapping-y のような箱ひげ図が、`x`にマッピングすると時計回りに90度回転した箱ひげ図（ @fig-box-mapping-x ）が出来上がる。

::::{.columns}

:::{.column width=49%}
```{r fig-box-mapping-y}
#| filename: "Code 24a"
#| fig-cap: "変数をyにマッピングした場合"
#| fig-width: 5
#| fig-height: 5
df |>
   ggplot() +
   geom_boxplot(aes(y = HDI_2018)) +
   labs(x = "", 
        y = "Human Development Index") +
   theme_bw(base_size = 14)
```
:::

:::{.column width=2%}
:::

:::{.column width=49%}
```{r fig-box-mapping-x}
#| filename: "Code 24b"
#| fig-cap: "変数をxにマッピングした場合"
#| fig-width: 5
#| fig-height: 5
df |>
   ggplot() +
   geom_boxplot(aes(x = HDI_2018)) +
   labs(x = "Human Development Index", 
        y = "") +
   theme_bw(base_size = 14)
```
:::

::::

### 次元の追加

　これまで作成した箱ひげ図の場合、`y`のみにマッピングされている。つまり、今のひ小ひげ図は「人間開発指数」の1次元グラフである。もう一つの次元を追加する場合は、`x`にマッピングするのがおすすめだ。もし、最初に`x`のみにマッピングされている場合は、追加的に`y`にマッピングすれば良い。それでは`HDI_2018`の箱ひげ図を大陸（`Continent`）ごとに分けてみよう。これは`x`に`Continent`をマッピングするだけで十分である。この場合、「大陸$\times$人間開発指数」といった2次元のグラフとなる。通常、箱ひげ図はこのように「ある変数の**グループごと**の分布」を示す時に使われる場合が多く、これまでの例のように「ある変数の分布」を示す時にはあまり使われない。グループごとの分布を見ない場合はヒストグラムが使われるケースが多い。

```{r}
#| filename: "Code 25"
#| fig-width: 8
#| fig-height: 3
df |>
   ggplot() +
   geom_boxplot(aes(y = HDI_2018, x = Continent)) +
   labs(x = "Continent", y = "Human Development Index") +
   theme_bw()
```

　もう一つの次元を追加するのであれば、次は色分けである。たとえば、OECD加盟有無で更に次元を追加する場合、`fill`にマッピングすれば良い。現在、`OECD`変数は0と1の値で構成されているnumeric型変数であるため、これをcharacter型、あるいはfactor型に変換し、`OECD_J`という名の列として追加する。作図の際は`fill = OECD_J`をマッピングするだけで色分けができる。もし色をカスタマイズしたい場合は`scale_fill_manual()`レイヤーを追加すれば良い。

```{r}
#| filename: "Code 26"
#| fig-width: 8
#| fig-height: 3
df |>
   mutate(OECD_J = if_else(OECD == 1, "Member", "Non-member"),
          OECD_J = factor(OECD_J, levels = c("Non-member", "Member"))) |>
   ggplot() +
   geom_boxplot(aes(y = HDI_2018, x = Continent, fill = OECD_J)) +
   labs(x = "Continent", y = "Human Development Index", fill = "OECD") +
   theme_bw()
```

　一つの箱ひげ図は1次元のグラフであるが、横軸を追加することで2次元に、色分けをすることで3次元まで拡張できる。4次元の箱ひげ図を作成する場合は、マッピングは`x`、`y`、`fill`までとし、おとなしくファセット分割をしよう。5次元の箱ひげ図は作れなくはないが、非常に読みにくくなるため極力避けること。

### カスタマイズ

　箱ひげ図の色は`color`でなく、`fill`にマッピングする。`color`にマッピングする場合、箱の色でなく、枠線の色が変更される。もし、すべての箱の色を変更したい場合は`aes()`の外側に`fill`引数を追加する。以下の例はすべての箱の色をcornsilkに変更する例である。

```{r}
#| filename: "Code 27"
#| fig-width: 8
#| fig-height: 3
df |>
   ggplot() +
   geom_boxplot(aes(y = HDI_2018, x = Continent), fill = "cornsilk") +
   labs(x = "Continent", y = "Human Development Index") +
   theme_bw()
```

　あるいは大陸ごとに色を変えることもできる。`x`だけでなく、`fill`にも`Continent`変数をマッピングすれば大陸ごとに面の色が異なる箱ひげ図ができる。

```{r}
#| filename: "Code 28"
#| fig-width: 8
#| fig-height: 3
df |>
   ggplot() +
   geom_boxplot(aes(y = HDI_2018, x = Continent, fill = Continent)) +
   labs(x = "Continent", y = "Human Development Index") +
   theme_bw() +
   theme(legend.position = "none")
```

　また、他のカスタマイズ要素としては箱の幅がある。箱の幅を狭くする場合は、`aes()`の**外側**に`width`を指定すれば良い。指定しない場合は0.75となっているが、これを0.75より小さくすると箱の幅が狭くなる。以下の例は箱の幅を3分の1にした例である。

```{r}
#| filename: "Code 29"
#| fig-width: 8
#| fig-height: 3.25
df |>
   ggplot() +
   geom_boxplot(aes(y = HDI_2018, x = Continent), width = 0.25) +
   labs(x = "Continent", y = "Human Development Index") +
   theme_bw() +
   theme(legend.position = "none")
```

　最後に、マッピングの交換について説明する。箱が多すぎる場合、図は横に長くなるケースが多い。スライドの場合、横長の画面となるのでそれでも問題ないが、論文やレポートになると使用する用紙は基本的に縦長となる。横が狭い用紙/画面に箱の多い図を載せると、横軸のラベルが重なったり、箱の幅が狭すぎたりすることもあろう。この場合、`x`と`y`を交換すれば解決できるかも知れない。以下の例はこれまでの図の`x`と`y`を交換した例である。

```{r}
#| filename: "Code 30"
#| fig-width: 8
#| fig-height: 3.25
df |>
   ggplot() +
   geom_boxplot(aes(x = HDI_2018, y = Continent)) +
   labs(x = "Human Development Index", y = "Continent") +
   theme_bw(base_size = 14) +
   theme(legend.position = "none")
```

　もし、縦軸の順番を反転するなら、`scale_y_discrete(limits = rev)`レイヤーを追加するだけで良い[^limits-rev]。あるいはデータを`ggplot()`に渡す前に`Continent`をfactor化し、要素の順番を逆にすることもできよう。

[^limits-rev]: `scale_y_discrete()`関数のdiscreteは「離散」を意味し、「連続（continuous）」の対概念である。この図において縦軸（Y軸）は大陸名であり、連続変数ではない。`limits = rev`は離散変数（主にcharacter型、factor型）の軸で使用可能な引数である。つまり、`scale_x_discrete()`では使用できるが、`scale_x_continuous()`や`scale_y_continuous()`では使用できない。

```{r}
#| filename: "Code 31"
#| fig-width: 8
#| fig-height: 3.25
df |>
   ggplot() +
   geom_boxplot(aes(x = HDI_2018, y = Continent)) +
   labs(x = "Human Development Index", y = "Continent") +
   scale_y_discrete(limits = rev) +
   theme_bw(base_size = 14) +
   theme(legend.position = "none")
```

## 教科書

* 散布図の作成: [教科書第18.6章](https://www.jaysong.net/RBook/visualization2.html#visual2-scatter)
* 折れ線グラフの作成: [教科書第18.7章](https://www.jaysong.net/RBook/visualization2.html#visual2-line)
* 箱ひげ図: [教科書第18.5章](https://www.jaysong.net/RBook/visualization2.html#visual2-box)
* グラフのカスタマイズ: [教科書第19章](https://www.jaysong.net/RBook/visualization3.html)
* その他のグラフ: [教科書第20章](https://www.jaysong.net/RBook/visualization4.html)
* その他のグラフ: [The R Graph Gallery](https://www.r-graph-gallery.com/)
