---
title: "第10回講義資料"
subtitle: "データハンドリング (2)"
toc: true
metadata-files: 
  - _material.yml
---

## スライド {.unlisted}

<a href="../../slides/micro/handling2.html" class="btn btn-primary btn-sm" target="_blank" role="button"><i class="bi bi-window"></i> 新しいタブで開く</a>

```{=html}
<iframe class="slide-deck" src="../../slides/micro/handling2.html" width="100%" style="aspect-ratio: 16 / 9.5;"></iframe>
```

## 記述統計量

　記述統計量（descriptive statistics）とはある**変数が持つ情報を要約した数値**である。例えば、10人の学生の数学成績が格納されている以下のようなnumeric型ベクトルがあるとしよう。7番目の学生は試験を受けたものの、ポンコツな教師が解答用紙を紛失して欠損値となっている。

```{r}
#| filename: "Code 01"
MathScore <- c(82, 45, 69, 94, 88, 73, NA, 51, 90, 63)
MathScore
```

　このクラスの数学成績について語る時、「うちのクラスの数学成績は82、45、69、94、...、63点ですよ」という人はいないだろう。数人のクラスならまだしも、数十人のクラスならあり得ない。我々は普段、「うちのクラスの数学成績はだいたいYY点ですよ」とか、「真ん中の成績はXX点ですよ」と言うだろう。また、クラス内の成績の格差/ばらつきを語るときも標準偏差や範囲（「できる子とできない子の点差は49点ですよ」）を言うのが普通である。このように元の長い情報を一つの数値として要約したものが記述統計量である。

　たとえば、`MathScore`を代表する値（=代表値）としては平均値（mean）、中央値（median）、最頻値（mode）などがある。

```{r}
#| filename: "Code 02"
mean(MathScore, na.rm = TRUE) # 平均値
```

```{r}
#| filename: "Code 03"
median(MathScore, na.rm = TRUE) # 中央値
```

　また、`MathScore`の格差、ばらつきの具合としては分散（variance）、標準偏差（standard deviation）、四分位範囲（interquartile range）、範囲（range）がある。

```{r}
#| filename: "Code 04"
var(MathScore, na.rm = TRUE) # 不偏分散
```

```{r}
#| filename: "Code 05"
sd(MathScore, na.rm = TRUE) # 不偏分散の平方根
```

```{r}
#| filename: "Code 06"
IQR(MathScore, na.rm = TRUE) # 四分位範囲
```

```{r}
#| filename: "Code 07"
max(MathScore, na.rm = TRUE) - min(MathScore, na.rm = TRUE) # 範囲
```

　今回は{dplyr}パッケージを用いて変数の記述統計量を計算する方法を紹介する。まず、今回の実習用データを読み込む。第9回に使用したデータと同じデータを使う。

```{r}
#| filename: "Code 08"
library(tidyverse)
df <- read_csv("Data/countries.csv")

df
```

　記述統計を計算する関数は`summarise()`である。使い方は以下の通りである。

```{r}
#| filename: "Code 09"
#| eval: false
データフレーム |>
  summarise(記述統計の関数(変数名, ...))
```

　たとえば、`Population`列の平均値を計算する場合は、

```{r}
#| filename: "Code 10"
df |>
  summarise(mean(Population))
```

と入力する。`HDI_2018`のように欠損値が含まれている変数なら`na.rm = TRUE`を忘れないようにしよう。

```{r}
#| filename: "Code 11"
df |>
  summarise(mean(HDI_2018, na.rm = TRUE))
```

　平均値を計算する`mean()`以外にも様々な変数が使える。ここでは代表的な記述統計量の関数を紹介する。他にも様々な記述統計量があるが、詳細は教科書[第13.1.2章](https://www.jaysong.net/RBook/datahandling2.html#summarise%E3%81%AB%E4%BD%BF%E3%81%88%E3%82%8B%E4%BE%BF%E5%88%A9%E3%81%AA%E9%96%A2%E6%95%B0)を参照されたい。

* `mean()`: 平均値
* `median()`: 中央値
* `sd()`: 不偏標準偏差
* `var()`: 不偏分散
* `IQR()`: 四分位範囲
* `min()`、`max()`: 最小値と最大値

　`summarise()`内には一つの変数、あるいは一つの記述統計量のみ書く必要はない。`()`内にいくらでも書ける。たとえば、`df`の`Population`と`Area`の平均値（`mean()`）と標準偏差（`sd()`）を計算する場合、計4つの記述統計量を計算することとなる。

```{r}
#| filename: "Code 12"
df |>
  summarise(mean(Population), # Populationの平均値
            sd(Population),   # Populationの不偏標準偏差
            mean(Area),       # Areaの平均値
            sd(Area))         # Areaの不偏標準偏差
```

　出力結果はデータフレーム（tibble）形式で表示されるが、列名が長く、非常に読みにくい。この列名を修正するためには`summarise()`の後に`rename()`を使うことで修正することもできるが、`summarise()`内で指定することもできる。たとえば、`df`の`Population`と`Area`の平均値（`mean()`）と標準偏差（`sd()`）を計算し、結果の列名を`Mean_Pop`、`SD_Pop`などとする。

```{r}
#| filename: "Code 13"
df |>
  summarise(Mean_Pop  = mean(Population),
            SD_Pop    = sd(Population),
            Mean_Area = mean(Area),
            SD_Area   = sd(Area))
```

　`出力される列名 = 記述統計の関数()`を指定することで、このように出力結果が読みやすくなる。

## グルーピング

　特定の変数の記述統計量を計算する場合は`mean()`や`sd()`などの関数のみを使った方が効率的なケースが多い。しかし、グループごとに記述統計量を計算する場合は、{dplyr}パッケージが大変便利である。{dplyr}を使わずに大陸ごとの`PPP_per_capita`の平均値を計算するとしよう。たとえば、`Continent`の値が`"Africa"`である国の`PPP_per_capita`の平均値を計算する場合は以下のように書く。

```{r}
#| filename: "Code 14"
# PPP_per_capitaは欠損値が含まれているため、na.rm = TRUEを指定
#（指定しないと、結果はNAとなる）
mean(df$PPP_per_capita[df$Continent == "Africa"], na.rm = TRUE)
```

　これを全ての大陸に対して同じ計算を行う場合、以下のようなコードになる。

```{r}
#| filename: "Code 15"
mean(df$PPP_per_capita[df$Continent == "Africa"], na.rm = TRUE)
```

```{r}
#| filename: "Code 16"
mean(df$PPP_per_capita[df$Continent == "America"], na.rm = TRUE)
```

```{r}
#| filename: "Code 17"
mean(df$PPP_per_capita[df$Continent == "Asia"], na.rm = TRUE)
```

```{r}
#| filename: "Code 18"
mean(df$PPP_per_capita[df$Continent == "Europe"], na.rm = TRUE)
```

```{r}
#| filename: "Code 19"
mean(df$PPP_per_capita[df$Continent == "Oceania"], na.rm = TRUE)
```

　たった5行のコードであるが、一行一行がかなり長く、可読性も優れているとは言えない。ここで{dplyr}の`group_by()`関数が力を発揮する。

```{r}
#| filename: "Code 20"
#| eval: false
データフレーム名 |>
  group_by(グループ化する変数名) |>
  summarise(...)
```

　たとえば、`df`の`Continent`でデータをグループ化し、`PPP_per_capita`の平均値を計算する場合、`summarise()`の前に`group_by(Continent)`を使いしてパイプをつなぐことで`Continent`の値ごとに`PPP_per_capita`の平均値が計算される。

```{r}
#| filename: "Code 21"
# PPP_per_capitaが欠損している国もあるので、na.rm = TRUEを追加
df |>
  group_by(Continent) |>
  summarise(Mean_PPP = mean(PPP_per_capita, na.rm = TRUE))
```

　コードが3行になっただけではなく、可読性も大きく改善されていることが分かる。`group_by()`関数は二つ以上の変数でグルーピングすることもできる。たとえば、`df`の`Continent`と`G20`でデータをグループ化し、`HDI_2018`の平均値を計算してみよう。

```{r}
#| filename: "Code 22"
#| message: true
df |>
  group_by(Continent, G20) |>
  summarise(Mean_HDI = mean(HDI_2018, na.rm = TRUE))
```

　`Continent`の値は5種類、`G20`の値は2種類であるため、計10個のグループができる。ちなみにこれを{dplyr}を使わず行うなら以下のようなコードになる。

```{r}
#| filename: "Code 23"
#| eval: false
mean(df$HDI_2018[df$Continent == "Africa" & df$G20 == 0], na.rm = TRUE)
mean(df$HDI_2018[df$Continent == "Africa" & df$G20 == 1], na.rm = TRUE)
mean(df$HDI_2018[df$Continent == "America" & df$G20 == 0], na.rm = TRUE)
mean(df$HDI_2018[df$Continent == "America" & df$G20 == 1], na.rm = TRUE)
mean(df$HDI_2018[df$Continent == "Asia" & df$G20 == 0], na.rm = TRUE)
mean(df$HDI_2018[df$Continent == "Asia" & df$G20 == 1], na.rm = TRUE)
mean(df$HDI_2018[df$Continent == "Europe" & df$G20 == 0], na.rm = TRUE)
mean(df$HDI_2018[df$Continent == "Europe" & df$G20 == 1], na.rm = TRUE)
mean(df$HDI_2018[df$Continent == "Oceania" & df$G20 == 0], na.rm = TRUE)
mean(df$HDI_2018[df$Continent == "Oceania" & df$G20 == 1], na.rm = TRUE)
```

　{dplyr}の素晴らしさが分かるだろう。次の内容に進む前に、以下のような謎のメッセージが出力されたのではないだろうか。

```
## `summarise()` has grouped output by 'Continent'. You can override using 
the `.groups` argument.
```

　このメッセージの理由は教科書[第13.2章](https://www.jaysong.net/RBook/datahandling2.html#handling2-group)に譲るが、この気持ち悪いメッセージをなくすためには、とりあえず、`group_by()`の後に`summarise()`を使う場合、`summarise()`の最後に`.groups = "drop"`を追加する。

```{r}
#| filename: "Code 24"
df |>
  group_by(Continent, G20) |>
  summarise(Mean_HDI = mean(HDI_2018, na.rm = TRUE),
            .groups  = "drop")
```

　これで謎のメッセージが出力されなくなっただろう。

　グルーピングを行う場合、各グループに属するケース数を調べたい場合もあろう。たとえば、大陸ごとに`PPP_per_capita`の平均値と標準偏差を出すだけでなく、各大陸に属する国数も表示したいとする。この時に使う関数が`n()`である。`()`内に別途の引数は不要である。

```{r}
#| filename: "Code 25"
df |>
  group_by(Continent) |>
  summarise(Mean_PPP = mean(PPP_per_capita, na.rm = TRUE),
            SD_PPP   = sd(PPP_per_capita, na.rm = TRUE),
            Cases    = n())
```

　最後に、詳細は解説しないが、`across()`関数を利用することで、複数の変数に対して複数の記述統計量をより短いコードで計算することができる。たとえば、`df`の`Population`から`PPP`列まで平均値と標準偏差を計算し、結果の変数名は`元の変数名_Mean`、`元の変数名_SD`とするコードを書いてみよう。

```{r}
#| filename: "Code 26"
df |>
  summarise(Population_Mean = mean(Population, na.rm = TRUE),
            Population_SD   = sd(Population, na.rm = TRUE),
            Area_Mean       = mean(Area, na.rm = TRUE),
            Area_SD         = sd(Area, na.rm = TRUE),
            GDP_Mean        = mean(GDP, na.rm = TRUE),
            GDP_SD          = sd(GDP, na.rm = TRUE),
            PPP_Mean        = mean(PPP, na.rm = TRUE),
            PPP_SD          = sd(PPP, na.rm = TRUE),)
```

　以上の作業は、`across()`関数を使う場合、以下のようにたった4行でできる。

```{r}
df |>
  #| filename: "Code 27"
  summarise(across(Population:PPP,
                   .fns = list(Mean = ~mean(.x, na.rm = TRUE),
                               SD   = ~mean(.x, na.rm = TRUE))))
```

　`across()`関数の詳細については教科書[第13.1章](https://www.jaysong.net/RBook/datahandling2.html#handling2-summarise)を参照されたい。ただし、無名関数（ラムダ式）の知識が必要である（そこまで難しいものではない）。

## 変数の計算

　以下では`mutate()`関数を利用して、データフレームの変数を用いた計算を行い、新しい列として追加する方法を紹介する。`mutate()`関数の使い方は以下の通りである。

```{r}
#| filename: "Code 28"
#| eval: false
データフレーム名 |>
  mutate(新しい列名 = 計算式)
```

　ここで、`新しい列名`が既に存在するの列名である場合、既存の列が上書きされる。一方、データフレームに存在しない列名の場合、新しい列が最後の列として追加される[^mutate-position]。

[^mutate-position]: `relocate()`同様、`.before`や`.after`で指定することもできる。

　ここでは、`df`の`Population`を`Area`で割り（=人口密度）、`Density`という名の列として追加してみよう。{dplyr}を使わずにこの処理を行う場合、以下のようなコードとなる。

```{r}
#| filename: "Code 29"
#| eval: false
df$Density <- df$Population / df$Area
```

　一方、{dplyr}の`mutate()`関数を使用する場合、以下のようなコードになる。

```{r}
#| filename: "Code 30"
df |>
  mutate(Density = Population / Area)
```

　出力される画面に`Density`列が見当たらない。これは新しく追加された`Density`列が最後の列であり、画面に収まらないからである。むろん、`Density`列は問題なく追加されており、出力画面の下段に省略されている変数名に含まれていることが分かる。

　もし、新しく追加される列の順番を指定したい場合は`relocate()` 同様、`.after`、または`.before`を指定すればよい。以下のコードは`Density`列を`Area`列の**後**に追加するコードである。

```{r}
#| filename: "Code 31"
df |>
  mutate(Density = Population / Area, 
         .after  = Area)
```

## 応用

　それでは前回と今回の内容を復習してみよう。最初の問題は「各国が世界人口に占める割合を計算し、降順で出力する」ことである。この問題を解くためには以下のような手順でデータをハンドリングする必要がある。

1. `df`の`Population`の合計を`Total_Pop`という列として追加する。
   * `mutate()`使用
2. `Population`を`Total_Pop`で割り、100を掛ける。結果は`Share_Pop`という名の列として`Population`後に追加する。
   * `mutate()`使用
3. `Country`から`Share_Pop`までの列のみ残すが、`Total_Pop`列は除外する。
   * `select()`使用
4. `Share_Pop`が大きい順で行を並び替える
   * `arrange()`使用

　以上の計算仮定の内、1と2は一つの`mutate()`関数内にまとめることができる。したがって、`データ |> mutate() |> select() |> arrange()`の順番でコードを書く必要がある。

```{r}
#| filename: "Code 32"
df |> 
  mutate(Total_Pop = sum(Population),              # 手順1
         Share_Pop = Population / Total_Pop * 100, # 手順2
         .after    = Population) |>               # 手順2
  select(Country:Share_Pop, -Total_Pop) |>        # 手順3
  arrange(desc(Share_Pop))                         # 手順4
```

　次の問題は「G7、G20、OECDのいずれかに加盟している国を`"先進国"`、それ以外は`"その他"`とし、二つのグループの人口密度、人間開発指数、民主主義度の平均値を出力する」ことである。

1. `df`の`Developed`という列を追加し、`G7`、`G20`、`OECD`のいずれかに加盟した国なら`"先進国"`、それ以外なら`"その他"`とする。
   * `mutate()`使用
2. 人口密度を`Density`という名の列として追加する。
   * `mutate()`使用
3. `HDI_2018`と`Polity_Score`のいずれかが欠損した行を除外する。
   * `filter()`使用
4. `Developed`変数でデータをグルーピングする。
   * `group_by()`使用
5. `HDI_2018`、`Polity_Score`、`Density`の平均値を求める。
   * `summarise()`使用
6. `df2`という名前のオブジェクトとして作業環境内に格納する。
   * 代入演算子（`<-`）使用
7. `df2`を出力する。

　今回も手順1と2は同じ`muate()`関数を使用するため、`新しいオブジェクト名 <- データ |> mutate() |> filter() |> group_by() |> summarise()`の順番でコードを各必要がある。

```{r}
#| filename: "Code 33"
df2 <- df |>
  mutate(Developed = G7 + G20 + OECD,
         Developed = if_else(Developed > 1, "先進国", "その他"), # 上書き
         Density   = Population / Area) |>
  filter(!is.na(HDI_2018), !is.na(Polity_Score)) |>
  group_by(Developed) |>
  summarise(Density = mean(Density),
            HDI     = mean(HDI_2018),
            Polity  = mean(Polity_Score))

df2
```

　いきなり出てきた`if_else()`関数だが、これは何だろう。これから解説する。

## 名目変数の扱い方

　先ほどの`df2`だが、出力順番が`"その他"` $\rightarrow$ `"先進国"`になっている。これを`"先進国"` $\rightarrow$ `"その他"`の順番にするならどうすれば良いだろうか。`summarise()`を行う場合、グルーピング変数のアルファベット順で表示される。ただし、これはアルファベットや数字に限定される話であり、日本語の場合、50音順になるとは限らない。ひらがな、カタカナなら50音順になるが、漢字はそうではない。そもそも読み方が複数あるので、どの基準にすればもよく分からない。しかも、漢字は日本だけが使う文字でもないため、読み方も国によって異なるだろう。この場合、`summarise()`を使う前にグルーピング変数を**factor型に変換**する必要がある。

　ある変数をfactor型に変換する場合は`factor()`関数を使う。第一引数は元となる変数名であり、`levels =`に順番を指定する。スペルミスに注意すること。

```{r}
#| filename: "Code 34"
df |>
  mutate(Developed = G7 + G20 + OECD,
         Developed = if_else(Developed > 1, "先進国", "その他"),
         Developed = factor(Developed, levels = c("先進国", "その他")),
         Density   = Population / Area) |>
  filter(!is.na(HDI_2018), !is.na(Polity_Score)) |>
  group_by(Developed) |>
  summarise(Density = mean(Density),
            HDI     = mean(HDI_2018),
            Polity  = mean(Polity_Score))
```

　それではこれまで放置してきた`if_else()`について解説しよう。`if_else()`は後ほど解説する`case_when()`や`recode()`のように変数のリコーディング（re-coding）に使う関数である。`if_else()`関数の使い方は以下の通りである。

```{r}
#| filename: "Code 35"
#| eval: false
if_else(条件式, TRUEの場合の戻り値, FALSEの場合の戻り値)
```

　たとえば、`df`の`OECD`が`1`なら`"OECD加盟国"`、それ以外なら`"OECD非加盟国"`に変換し、`OECD_J`という列として追加する場合、以下のコードになる。リコーディングの場合、既存の変数を上書きするより、新しい列として追加することを推奨する。

```{r}
#| filename: "Code 36"
df <- df |>
  mutate(OECD_J = if_else(OECD == 1, "OECD加盟国", "OECD非加盟国"))

df
```

　それではまず、`OECD`変数でデータをグルーピングし、`HDI_2018`と`FH_Total`の平均値を計算してみよう。

```{r}
#| filename: "Code 37"
df |>
  group_by(OECD) |>
  summarise(HDI = mean(HDI_2018, na.rm = TRUE),
            FH  = mean(FH_Total, na.rm = TRUE))
```

　続いて、`OECD`でなく、先ほど作成した`OECD_J`列でグルーピングしてみよう。

```{r}
#| filename: "Code 38"
df |>
  group_by(OECD_J) |>
  summarise(PPP = mean(PPP_per_capita, na.rm = TRUE),
            HDI = mean(HDI_2018, na.rm = TRUE),
            FH  = mean(FH_Total, na.rm = TRUE))
```

　出力される結果の第1列が`OECD_J`になっているが、これを`OECD`に変更したい場合は`group_by(OECD_J)`を`group_by(OECD = OECD_J)`に変更すれば良い。

　`if_else()`は条件が一つのみの場合に使用する関数である。もし、条件式を複数使いたい場合はどうすれば良いだろうか。ここではまず、`mutate()`内に`case_when()`を使用する方法から紹介する。

```{r}
#| filename: "Code 39"
#| eval: false
データフレーム名 |>
  mutate(新しい変数名 = case_when(条件1 ~ 新しい値,
                                条件2 ~ 新しい値,
                                ...
                                TRUE ~ 新しい値))
```

　`TRUE ~ 新しい値`は「上記の条件全てが満たされ**ない**場合の値」を意味する。ここでは`df`の`Continent`列を日本語にし、`Continent_J`として追加してみよう。

```{r}
#| filename: "Code 40"
df |>
  mutate(Continent_J = case_when(Continent == "Africa"  ~ "アフリカ",
                                 Continent == "America" ~ "アメリカ",
                                 Continent == "Asia"    ~ "アジア",
                                 Continent == "Europe"  ~ "ヨーロッパ",
                                 TRUE                   ~ "オセアニア")) |>
  group_by(大陸 = Continent_J) |>
  # 日本語は非推奨だが、一応使える（_と.を除く特殊記号不可）
  summarise(OECD加盟国比率 = mean(OECD),
            国家数         = n())
```

　この「新しい値」は条件の数だけ存在する必要はない。たとえば、`Continent`列の値が`"Asia"`か`"Oceania"`、`"America"`なら`"Asia-Pafific"`に、それ以外は`"Others"`に変更し、その結果を`AP`という名の新しい列として追加するとしよう。

```{r}
#| filename: "Code 41"
df |>
  mutate(AP = case_when(Continent == "Africa"  ~ "Others",
                        Continent == "America" ~ "Asia-Pacific",
                        Continent == "Asia"    ~ "Asia-Pacific",
                        Continent == "Europe"  ~ "Others",
                        TRUE                   ~ "Asia-Pacific")) |>
  group_by(Continent = AP) |>
  summarise(Population = mean(Population),
            Countries  = n())
```

　以上の例は戻り値が2種類、つまり、`"Asia-Pacific"`か`"Others"`のみである。実はこの場合、`if_else()`関数を使うこともできる。ここで便利な演算子が`%in%`演算子である。これは左側の値が右側のベクトルに含まれていれば`TRUE`、含まれていなければ`FALSE`が返ってくる関数である。たとえば、`df`の`Continent`列が`"Asia"`か`"Oceania"`、`"America"`のいずれかに該当するか確認してみよう。

```{r}
#| filename: "Code 42"
df$Continent %in% c("Asia", "Oceania", "America")
```

　これを`if_else()`関数の条件式として使用する。

```{r}
#| filename: "Code 43"
df |>
  mutate(AP = if_else(Continent %in% c("Asia", "America", "Oceania"), "Asia-Pacific", "Others")) |>
  group_by(Continent = AP) |>
  summarise(Population = mean(Population),
            Countries  = n())
```

　最後に`recode()`関数について解説する。これまで紹介した`if_else()`と`case_when()`は条件式を使うため、`==`、`!=`、`%in%`以外にも`>`や`<=`なども使える。ただし、書き方がやや複雑である。`recode()`は使う条件式が`==`のみの場合、`if_else()`や`case_when()`を代替可能な関数である。ここでは例だけ紹介しよう。

```{r}
#| filename: "Code 44"
df |>
  mutate(AP = recode(Continent,
                     "Asia"    = "Asia-Pacific",
                     "America" = "Asia-Pacific",
                     "Oceania" = "Asia-Pacific",
                     .default  = "Others")) |>
  group_by(Continent = AP) |>
  summarise(Population = mean(Population),
            Countries  = n())
```

　`recode()`の第一引数はリコーディングする変数名であり、`.default`はいずれの条件にも該当しない場合の値を意味する。

## 欠損値の扱い方

　世論調査などの場合、欠損値が`NA`でなく、`9`や`99`、`""`などの場合がある。たとえば、以下のような`my_data`というデータがあるとしよう。

```{r}
#| filename: "Code 45"
my_data <- tibble(ID       = 1:10,
                  Age      = c(32, 35, 57, 999, 74, 66, 999, 49, 78, 67),
                  HighEduc = c(1, 0, 0, 1, 0, 9, 1, 1, 9, 9))
my_data
```

　`ID`は回答者の識別番号、`Age`は回答者の年齢、`HighEduc`は回答者が大卒以上なら1、それ以外は0を意味する。そして、年齢を回答しなかった回答者の年齢は999、学歴については9となっている。ここで回答者の年齢と学歴の平均値を出せばどうなるだろうか。

```{r}
#| filename: "Code 46"
mean(my_data$Age)
```

```{r}
#| filename: "Code 47"
mean(my_data$HighEduc)
```

　回答者の平均年齢は245.6歳（!!）、学歴の平均値は3.1となっている。医学の発展によって人間の寿命が伸びたとしても、最大値が1のはずの`HighEduc`の平均値が3.1ということはナンセンスである。**データ分析の前に欠損値の確認と処理は必須であり、これを怠ると研究結果に大きな歪みな生じかねない。**とりわけ、欠損値が`NA`でなく、`9`や`999`、`""`などになっているケースはより注意が必要である。今回の実習データは既に欠損値の処理済み、つまり、欠損している値は`NA`になっている。ここでは上の`my_data`の使って考えてみよう。

　まず、`YoungAge`変数を作成し、`Age`が39**以下**なら`1`、それ以外は`0`にする。ただし、999なら`NA`とする。続いて、`HighEduc2`変数を作成し、`HighEduc`が1なら`"大卒以上"`、それ以外は`"大卒未満"`にする。ただし、9なら`NA`とする。この作業を行うには`mutate()`内に`case_when()`を使えば良いだろう。

```{r}
#| filename: "Code 48"
#| error: true
my_data |>
  mutate(YoungAge  = case_when(Age == 999 ~ NA,
                               Age <=  39 ~ 1,
                               TRUE       ~ 0),
         HighEduc2 = case_when(HighEduc == 9 ~ NA,
                               HighEduc == 1 ~ "大卒以上",
                               TRUE          ~ "大卒未満"))
```

　エラーが返ってきた。なぜだろう。問題は`NA`である。確かにRにおいて欠損値は`NA`のみである。しかし、{tidyverse}の世界は、同じ`NA`でもnumeric型の`NA`とcharcter型の`NA`は区別される。上のコードの場合、`YoungAge`はnumeric型、`HighEduc2`はcharacter型変数になるだろう。`case_when()`は`if_else()`などを使う場合、`NA`でなく、**生成される列のデータ型**に応じて`NA_real_`（numeric型）、または`NA_character_`（character型）を使用（logical型なら`NA`のままでOK）する必要がある。

```{r}
#| filename: "Code 49"
#| error: true
my_data |>
  mutate(YoungAge  = case_when(Age == 999 ~ NA_real_,
                               Age <=  39 ~ 1,
                               TRUE       ~ 0),
         HighEduc2 = case_when(HighEduc == 9 ~ NA_character_,
                               HighEduc == 1 ~ "大卒以上",
                               TRUE          ~ "大卒未満"))
```

　もう一つの例として特定の値を欠損値とし、それ以外の値は元も値にする場合を考えよう。つまり、`Age`と`HighEduc`列においてそれぞれ999、9を`NA`にし、そのまま上書きするものである。例えば`Age`は`Age`の値が999なら（`Age == 999`）、`NA_real_`を返し、それ以外の場合は既存の`Age`の値を取る。この作業は以下のコードで実行できる。

```{r}
#| filename: "Code 50"
my_data |>
  mutate(Age      = if_else(Age == 999, NA_real_, Age),
         HighEduc = if_else(HighEduc == 9, NA_real_, HighEduc))
```

　欠損を意味する値が複数の場合もある。`my_data`の`Age`は`999`のみが欠損値であるが、世論調査によっては`888`、`999`、`-1`のように複数の欠損値が存在するケースがある。この場合は`case_when()`を使うか、`if_else()`関数内にOR演算子（`|` / `%in%`）を使えば良い。

　最後に欠損値処理に特化した{naniar}パッケージの`replace_with_na()`関数を紹介する。引数はリスト型オブジェクトであり、リストの各要素は`変数名 = 欠損値の値`となる。たとえば、`Age`の欠損値は`999`だから`Age = 999`である。これは条件式ではないため、`==`でなく、`=`を使う。欠損値の値が複数ある場合は、`変数名 = c(値1, 値2, ...)`のように書く。

```{r}
#| filename: "Code 51"
library(naniar) # 事前に install.package(naniar) でインストール
my_data |>
  # Ageは999、HighEducは9が欠損値
  replace_with_na(list(Age = 999, HighEduc = 9))
```

　他にも似たような関数として、{expss}パッケージの`na_if()`関数などがあるが、自分が使いやすいものを使えば良い。以下のコードは、{expss}の`na_if()`関数を使って上記のコードを再現したものである[^expss]。

[^expss]: {naniar}パッケージの`replace_with_na()`関数は欠損値に該当する値が複数指定できる。たとえば、`Age`変数の888か999が欠損値を意味する場合、`list(Age = c(888, 999))`のように指定できる。一方、{expss}パッケージの`na_if()`は欠損値に該当する値を1つしかしてできない。

```{r}
#| filename: "Code 52"
library(expss) # 事前に install.package(expss) でインストール
my_data |>
  mutate(Age      = na_if(Age, 999),
         HighEduc = na_if(HighEduc, 9))
```

## 教科書

* 『私たちのR: ベストプラクティスの探求』
   * 「[データハンドリング[拡張]](https://www.jaysong.net/RBook/datahandling2.html)」
   * 「[データハンドリング[factor型]](https://www.jaysong.net/RBook/factor.html)」
